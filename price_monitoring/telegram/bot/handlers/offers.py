"""Offer display and pagination handlers for the Telegram bot."""

import logging
from aiogram import Router, types
from aiogram.fsm.context import FSMContext

from price_monitoring.telegram.bot.keyboards.pagination import (
    create_pagination_keyboard
)
from price_monitoring.telegram.bot.keyboards.main_menu import (
    create_main_menu_keyboard
)
from price_monitoring.telegram.bot.formatters.offer_formatter import (
    format_offers_message
)
from price_monitoring.telegram.bot.states.filter_states import FilterStates
from price_monitoring.telegram.bot.constants.settings import PAGE_SIZE
from price_monitoring.telegram.bot.constants.modes import TRADING_MODES

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç DMarket API
from price_monitoring.parsers.dmarket_api import dmarket_api_client

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(lambda c: c.data == "show_offers")
async def process_show_offers(
    callback_query: types.CallbackQuery, 
    state: FSMContext
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è".
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
    
    Args:
        callback_query: Callback query –æ—Ç Telegram
        state: –û–±—ä–µ–∫—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if not callback_query.message or not isinstance(
        callback_query.message, types.Message
    ):
        await callback_query.answer(
            "Cannot process: "
            "original message not found or inaccessible."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ state
    user_data = await state.get_data()
    
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    selected_mode = user_data.get("selected_mode", "balance_boost")
    selected_games = user_data.get("selected_games", ["CS2"])
    min_profit = float(user_data.get("min_profit", 1))
    max_profit = float(user_data.get("max_profit", 100))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
    mode_name = "–Ω–µ –≤—ã–±—Ä–∞–Ω"
    mode_emoji = "\U00002753"  # ‚ùì
    if selected_mode in TRADING_MODES:
        mode_info = TRADING_MODES[selected_mode]
        mode_name = mode_info["name"]
        mode_emoji = mode_info["emoji"]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    games_str = ", ".join(selected_games) if selected_games else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∏–≥—Ä—ã
    search_game = "cs2"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é CS2
    if selected_games and len(selected_games) == 1:
        search_game = selected_games[0].lower()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞
    message_text = (
        f"üîç <b>–ü–æ–∏—Å–∫ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b>\n\n"
        f"<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:</b>\n"
        f"{mode_emoji} <b>–†–µ–∂–∏–º:</b> {mode_name}\n"
        f"üéÆ <b>–ò–≥—Ä—ã:</b> {games_str}\n"
        f"üí∞ <b>–ü—Ä–∏–±—ã–ª—å:</b> –æ—Ç <b>${min_profit:.2f}</b> "
        f"–¥–æ <b>${max_profit:.2f}</b>\n\n"
        f"<i>–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π... —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.</i>\n"
        f"<i>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.</i>"
    )
    
    await callback_query.message.edit_text(
        message_text,
        parse_mode="HTML"
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å '—á–∞—Å–∏–∫–∏' —É –∫–Ω–æ–ø–∫–∏
    await callback_query.answer("–ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...")
    
    try:
        # –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é API Dmarket
        search_result = await dmarket_api_client.find_arbitrage_opportunities(
            game=search_game,
            min_profit=min_profit,
            max_profit=max_profit,
            limit=PAGE_SIZE
        )
        
        offers = search_result.get("items", [])
        cursor = search_result.get("cursor")
        has_next_page = search_result.get("has_next_page", False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ state –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        await state.update_data(
            offers_page=1,
            offers_cursor=cursor,
            offers_game=search_game,
            offers_min_profit=min_profit,
            offers_max_profit=max_profit,
            offers_has_next_page=has_next_page
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        await state.set_state(FilterStates.browsing_offers)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        results_text = format_offers_message(
            offers, 
            1, 
            10 if has_next_page else 1
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = create_pagination_keyboard(
            page=1,
            total_pages=10 if has_next_page else 1,
            has_next_page=has_next_page,
            has_prev_page=False
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await callback_query.message.answer(
            results_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error searching for offers: {e}")
        await callback_query.message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:\n"
            f"<code>{str(e)}</code>\n\n"
            f"<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å "
            f"–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>",
            parse_mode="HTML",
            reply_markup=create_main_menu_keyboard()
        )


# –§–∏–ª—å—Ç—Ä –¥–ª—è callback_query, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
def pagination_callback_filter(callback: types.CallbackQuery) -> bool:
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è callback_query, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    
    Args:
        callback: Callback query –æ—Ç Telegram
        
    Returns:
        True –µ—Å–ª–∏ callback_data —Å–≤—è–∑–∞–Ω —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π, –∏–Ω–∞—á–µ False
    """
    return (callback.data is not None and 
            (callback.data.startswith("page_next_") or 
             callback.data.startswith("page_prev_")))


@router.callback_query(pagination_callback_filter)
async def process_pagination(
    callback_query: types.CallbackQuery, 
    state: FSMContext
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ "–í–ø–µ—Ä–µ–¥" –∏ "–ù–∞–∑–∞–¥".
    
    Args:
        callback_query: Callback query –æ—Ç Telegram
        state: –û–±—ä–µ–∫—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if not callback_query.message or not isinstance(
        callback_query.message, types.Message
    ):
        await callback_query.answer(
            "Cannot process: "
            "original message not found or inaccessible."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ callback_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not callback_query.data:
        await callback_query.answer("Error: Missing callback data.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ state
    user_data = await state.get_data()
    current_page = user_data.get("offers_page", 1)
    cursor = user_data.get("offers_cursor")
    game = user_data.get("offers_game", "cs2")
    min_profit = user_data.get("offers_min_profit", 1.0)
    max_profit = user_data.get("offers_max_profit", 100.0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥)
    is_next = callback_query.data.startswith("page_next_")
    
    # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if not is_next and current_page > 1:
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        new_page = current_page - 1
        # –î–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–º –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫—É—Ä—Å–æ—Ä
        prev_cursor = f"page_{new_page - 1}" if new_page > 1 else None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            offers_page=new_page,
            offers_cursor=prev_cursor
        )
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∑–∞–ø—Ä–æ—Å –∫ API)
        search_result = await dmarket_api_client.find_arbitrage_opportunities(
            game=game,
            min_profit=min_profit,
            max_profit=max_profit,
            limit=PAGE_SIZE,
            cursor=prev_cursor
        )
        
        offers = search_result.get("items", [])
        next_cursor = search_result.get("cursor")
        has_next_page = True  # –ù–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä –≤ state
        await state.update_data(offers_cursor=next_cursor)
    
    # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥" –Ω–∞–º –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫—É—Ä—Å–æ—Ä
    elif is_next and cursor:
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        new_page = current_page + 1
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—É—Ä—Å–æ—Ä–∞
        search_result = await dmarket_api_client.find_arbitrage_opportunities(
            game=game,
            min_profit=min_profit,
            max_profit=max_profit,
            limit=PAGE_SIZE,
            cursor=cursor
        )
        
        offers = search_result.get("items", [])
        next_cursor = search_result.get("cursor")
        has_next_page = search_result.get("has_next_page", False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            offers_page=new_page,
            offers_cursor=next_cursor,
            offers_has_next_page=has_next_page
        )
    else:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        await callback_query.answer(
            "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É."
        )
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    results_text = format_offers_message(
        offers,
        new_page,
        10 if has_next_page else new_page  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å. 10 —Å—Ç—Ä–∞–Ω–∏—Ü
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = create_pagination_keyboard(
        page=new_page,
        total_pages=10 if has_next_page else new_page,
        has_next_page=has_next_page,
        has_prev_page=new_page > 1
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await callback_query.message.edit_text(
        results_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(offers_page=new_page) 