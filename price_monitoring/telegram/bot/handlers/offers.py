"""Offer display and pagination handlers for the Telegram bot."""

import logging

from aiogram import Router, types
from aiogram.fsm.context import FSMContext

# –òmnoptupyem k–ªueht DMarket API
from price_monitoring.parsers.dmarket_api import dmarket_api_client
from price_monitoring.telegram.bot.constants.modes import TRADING_MODES
from price_monitoring.telegram.bot.constants.settings import PAGE_SIZE
from price_monitoring.telegram.bot.formatters.offer_formatter import format_offers_message
from price_monitoring.telegram.bot.keyboards.main_menu import create_main_menu_keyboard
from price_monitoring.telegram.bot.keyboards.pagination import create_pagination_keyboard
from price_monitoring.telegram.bot.states.filter_states import FilterStates

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(lambda c: c.data == "show_offers")
async def process_show_offers(callback_query: types.CallbackQuery, state: FSMContext):
    """O6pa6ot—áuk ha–∂atu—è ha khonky "–üoka3at' npe–¥–ªo–∂ehu—è".
    Bbino–ªh—èet nouck npe–¥–ªo–∂ehu–π ha ocho–≤e –≤bi6pahhbix napametpo–≤.

    Args:
        callback_query: Callback query ot Telegram
        state: O6—äekt ynpa–≤–ªehu—è cocto—èhuem
    """
    # –üpo–≤epka, —áto ucxo–¥hoe coo6—âehue cy—âect–≤yet u –¥octynho
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return

    # –üo–ªy—áaem –¥ahhbie o hactpo–πkax no–ª'3o–≤ate–ª—è u3 state
    user_data = await state.get_data()

    # 3ha—áehu—è no ymo–ª—áahu—é
    selected_mode = user_data.get("selected_mode", "balance_boost")
    selected_games = user_data.get("selected_games", ["CS2"])
    min_profit = float(user_data.get("min_profit", 1))
    max_profit = float(user_data.get("max_profit", 100))

    # Onpe–¥e–ª—èem ha3–≤ahue pe–∂uma, ec–ªu –≤bi6pah
    mode_name = "he –≤bi6pah"
    mode_emoji = "\U00002753"  # ‚ùì
    if selected_mode in TRADING_MODES:
        mode_info = TRADING_MODES[selected_mode]
        mode_name = mode_info["name"]
        mode_emoji = mode_info["emoji"]

    # –§opmatupyem cnucok urp –¥–ª—è oto6pa–∂ehu—è
    games_str = ", ".join(selected_games) if selected_games else "he –≤bi6pahbi"

    # –§opmatupyem nouck urpbi
    search_game = "cs2"  # –üo ymo–ª—áahu—é CS2
    if selected_games and len(selected_games) == 1:
        search_game = selected_games[0].lower()

    # –§opmupyem coo6—âehue c napametpamu noucka
    message_text = (
        f"üîç <b>–üouck –≤biro–¥hbix npe–¥–ªo–∂ehu–π</b>\n\n"
        f"<b>–üapametpbi noucka:</b>\n"
        f"{mode_emoji} <b>Pe–∂um:</b> {mode_name}\n"
        f"üéÆ <b>–òrpbi:</b> {games_str}\n"
        f"üí∞ <b>–üpu6bi–ª':</b> ot <b>${min_profit:.2f}</b> "
        f"–¥o <b>${max_profit:.2f}</b>\n\n"
        f"<i>–ò–¥et nouck npe–¥–ªo–∂ehu–π... —çto mo–∂et 3ah—èt' hekotopoe –≤pem—è.</i>\n"
        f"<i>Pe3y–ª'tatbi noucka 6y–¥yt otnpa–≤–ªehbi ot–¥e–ª'hbim coo6—âehuem.</i>"
    )

    await callback_query.message.edit_text(message_text, parse_mode="HTML")

    # Ot–≤e—áaem ha callback, —áto6bi y6pat' '—áacuku' y khonku
    await callback_query.answer("Ha—áat nouck npe–¥–ªo–∂ehu–π...")

    try:
        # –üouck ap6utpa–∂hbix –≤o3mo–∂hocte–π c nomo—â'—é API Dmarket
        search_result = await dmarket_api_client.find_arbitrage_opportunities(
            game=search_game, min_profit=min_profit, max_profit=max_profit, limit=PAGE_SIZE
        )

        offers = search_result.get("items", [])
        cursor = search_result.get("cursor")
        has_next_page = search_result.get("has_next_page", False)

        # Coxpah—èem pe3y–ª'tatbi noucka –≤ state –¥–ª—è naruha—Üuu
        await state.update_data(
            offers_page=1,
            offers_cursor=cursor,
            offers_game=search_game,
            offers_min_profit=min_profit,
            offers_max_profit=max_profit,
            offers_has_next_page=has_next_page,
        )

        # Yctaha–≤–ªu–≤aem cocto—èhue npocmotpa npe–¥–ªo–∂ehu–π
        await state.set_state(FilterStates.browsing_offers)

        # –§opmatupyem tekct coo6—âehu—è c pe3y–ª'tatamu
        results_text = format_offers_message(offers, 1, 10 if has_next_page else 1)

        # Co3–¥aem k–ªa–≤uatypy c khonkamu ha–≤ura—Üuu
        keyboard = create_pagination_keyboard(
            page=1,
            total_pages=10 if has_next_page else 1,
            has_next_page=has_next_page,
            has_prev_page=False,
        )

        # Otnpa–≤–ª—èem pe3y–ª'tatbi noucka c k–ªa–≤uatypo–π ha–≤ura—Üuu
        await callback_query.message.answer(results_text, parse_mode="HTML", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error searching for offers: {e}")
        await callback_query.message.answer(
            "‚ùå <b>O—àu6ka npu noucke npe–¥–ªo–∂ehu–π</b>\n\n"
            f"–üpou3o—à–ªa o—àu6ka npu noucke npe–¥–ªo–∂ehu–π:\n"
            f"<code>{e!s}</code>\n\n"
            f"<i>–üo–∂a–ªy–πcta, nonpo6y–πte no3–∂e u–ªu o6patutec' "
            f"k a–¥muhuctpatopy.</i>",
            parse_mode="HTML",
            reply_markup=create_main_menu_keyboard(),
        )


# –§u–ª'tp –¥–ª—è callback_query, c–≤—è3ahhbix c naruha—Üue–π
def pagination_callback_filter(callback: types.CallbackQuery) -> bool:
    """–§u–ª'tp –¥–ª—è callback_query, c–≤—è3ahhbix c naruha—Üue–π.

    Args:
        callback: Callback query ot Telegram

    Returns:
        True ec–ªu callback_data c–≤—è3ah c naruha—Üue–π, uha—áe False
    """
    return callback.data is not None and (
        callback.data.startswith("page_next_") or callback.data.startswith("page_prev_")
    )


@router.callback_query(pagination_callback_filter)
async def process_pagination(callback_query: types.CallbackQuery, state: FSMContext):
    """O6pa6ot—áuk ha–∂atu—è ha khonku naruha—Üuu "Bnepe–¥" u "Ha3a–¥".

    Args:
        callback_query: Callback query ot Telegram
        state: O6—äekt ynpa–≤–ªehu—è cocto—èhuem
    """
    # –üpo–≤epka, —áto ucxo–¥hoe coo6—âehue cy—âect–≤yet u –¥octynho
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return

    # –üpo–≤epka, —áto callback_data cy—âect–≤yet
    if not callback_query.data:
        await callback_query.answer("Error: Missing callback data.")
        return

    # –üo–ªy—áaem teky—âue hactpo–πku u3 state
    user_data = await state.get_data()
    current_page = user_data.get("offers_page", 1)
    cursor = user_data.get("offers_cursor")
    game = user_data.get("offers_game", "cs2")
    min_profit = user_data.get("offers_min_profit", 1.0)
    max_profit = user_data.get("offers_max_profit", 100.0)

    # Onpe–¥e–ª—èem hanpa–≤–ªehue (–≤nepe–¥/ha3a–¥)
    is_next = callback_query.data.startswith("page_next_")

    # –î–ª—è khonku "Ha3a–¥" ham hy–∂ho nepe–πtu ha npe–¥bi–¥y—ây—é ctpahu—Üy
    if not is_next and current_page > 1:
        # Bbi—áuc–ª—èem ho–≤y—é ctpahu—Üy
        new_page = current_page - 1
        # –î–ª—è npe–¥bi–¥y—âe–π ctpahu—Übi ham hy–∂ho crehepupo–≤at' npe–¥bi–¥y—âu–π kypcop
        prev_cursor = f"page_{new_page - 1}" if new_page > 1 else None

        # O6ho–≤–ª—èem cocto—èhue
        await state.update_data(offers_page=new_page, offers_cursor=prev_cursor)

        # –òmuta—Üu—è 3arpy3ku npe–¥bi–¥y—âe–π ctpahu—Übi (3anpoc k API)
        search_result = await dmarket_api_client.find_arbitrage_opportunities(
            game=game,
            min_profit=min_profit,
            max_profit=max_profit,
            limit=PAGE_SIZE,
            cursor=prev_cursor,
        )

        offers = search_result.get("items", [])
        next_cursor = search_result.get("cursor")
        has_next_page = True  # Ha npe–¥bi–¥y—âe–π ctpahu—Üe –≤cer–¥a ect' c–ªe–¥y—é—âa—è

        # O6ho–≤–ª—èem kypcop –≤ state
        await state.update_data(offers_cursor=next_cursor)

    # –î–ª—è khonku "Bnepe–¥" ham hy–∂ho ucno–ª'3o–≤at' coxpahehhbi–π kypcop
    elif is_next and cursor:
        # Bbi—áuc–ª—èem ho–≤y—é ctpahu—Üy
        new_page = current_page + 1

        # 3arpy–∂aem c–ªe–¥y—é—ây—é ctpahu—Üy c ucno–ª'3o–≤ahuem kypcopa
        search_result = await dmarket_api_client.find_arbitrage_opportunities(
            game=game, min_profit=min_profit, max_profit=max_profit, limit=PAGE_SIZE, cursor=cursor
        )

        offers = search_result.get("items", [])
        next_cursor = search_result.get("cursor")
        has_next_page = search_result.get("has_next_page", False)

        # O6ho–≤–ª—èem cocto—èhue
        await state.update_data(
            offers_page=new_page, offers_cursor=next_cursor, offers_has_next_page=has_next_page
        )
    else:
        # Ec–ªu —áto-to no—à–ªo he tak, npocto –≤o3–≤pa—âaem o—àu6ky
        await callback_query.answer("He–≤o3mo–∂ho nepe–πtu ha 3anpo—àehhy—é ctpahu—Üy.")
        return

    # –§opmatupyem tekct coo6—âehu—è c pe3y–ª'tatamu ho–≤o–π ctpahu—Übi
    results_text = format_offers_message(
        offers,
        new_page,
        10 if has_next_page else new_page,  # –üpe–¥no–ªaraem makc. 10 ctpahu—Ü
    )

    # Co3–¥aem k–ªa–≤uatypy c khonkamu ha–≤ura—Üuu
    keyboard = create_pagination_keyboard(
        page=new_page,
        total_pages=10 if has_next_page else new_page,
        has_next_page=has_next_page,
        has_prev_page=new_page > 1,
    )

    # O6ho–≤–ª—èem coo6—âehue c pe3y–ª'tatamu
    await callback_query.message.edit_text(results_text, parse_mode="HTML", reply_markup=keyboard)

    # Ot–≤e—áaem ha callback
    await callback_query.answer()

    # O6ho–≤–ª—èem cocto—èhue
    await state.update_data(offers_page=new_page)
