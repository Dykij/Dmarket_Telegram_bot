import logging
import asyncio
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from ..keyboards import (
    create_main_menu_keyboard,
    create_mode_selection_keyboard,
    create_filter_settings_keyboard,
    create_game_selection_keyboard,
    create_pagination_keyboard
)
from ..formatters import format_offers_message
from ..states import FilterStates
# Assuming dmarket_api_client is correctly placed and importable
# from price_monitoring.parsers.dmarket_api import dmarket_api_client
from .filters import (
    game_callback_filter,
    mode_callback_filter,
    pagination_callback_filter
)

logger = logging.getLogger(__name__)
router = Router()
PAGE_SIZE = 5 # Consider moving to config

@router.callback_query(lambda c: c.data == "select_mode")
async def process_select_mode(callback_query: types.CallbackQuery):
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return
    keyboard = create_mode_selection_keyboard()
    await callback_query.message.edit_text("\U0001F3AF –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:", reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "configure_filters")
async def process_configure_filters(callback_query: types.CallbackQuery):
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return
    keyboard = create_filter_settings_keyboard()
    await callback_query.message.edit_text(
        "üõ†Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        "<i>–≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.</i>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "select_games")
async def process_select_games(callback_query: types.CallbackQuery):
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return
    keyboard = create_game_selection_keyboard()
    await callback_query.message.edit_text(
        "üéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –∏–≥—Ä—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –∏–≥—Ä—ã "
        "–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –∏–≥—Ä–∞–º.\n\n"
        "<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–≥—Ä—ã: CS2, Dota2, TF2, Rust</i>", 
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback_query.answer()

@router.callback_query(game_callback_filter)
async def process_game_selection(callback_query: types.CallbackQuery, state: FSMContext):
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return
    if not callback_query.data:
        await callback_query.answer("Error: Missing callback data.")
        return
    from ..keyboards import SUPPORTED_GAMES
    selected_game = callback_query.data.split("_", 1)[1]
    user_id = callback_query.from_user.id if callback_query.from_user else "Unknown"
    game_emojis = {"cs2": "üî´", "dota2": "üßô‚Äç‚ôÇÔ∏è", "tf2": "üé©", "rust": "üèùÔ∏è", "all": "‚úÖ"}
    game_emoji = game_emojis.get(selected_game, "üéÆ")
    if selected_game == "all":
        logger.info(f"User {user_id} selected all games.")
        await state.update_data(selected_games=SUPPORTED_GAMES)
        message_text = (
            f"{game_emoji} <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ –∏–≥—Ä—ã</b>\n\n"
            f"–ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –ø–æ –≤—Å–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –∏–≥—Ä–∞–º: "
            f"<b>{', '.join(SUPPORTED_GAMES)}</b>\n\n"
            f"<i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª –≤—ã–±–æ—Ä–∞ –∏–≥—Ä.</i>"
        )
        await callback_query.message.edit_text(message_text, parse_mode="HTML")
        await callback_query.answer("–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∏–≥—Ä—ã")
    else:
        proper_game_name = next((game for game in SUPPORTED_GAMES if game.lower() == selected_game), selected_game.upper())
        logger.info(f"User {user_id} selected game: {selected_game}")
        await state.update_data(selected_games=[proper_game_name])
        message_text = (
            f"{game_emoji} <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: {proper_game_name}</b>\n\n"
            f"–ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º —ç—Ç–æ–π –∏–≥—Ä—ã.\n\n"
            f"<i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª–µ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä.</i>"
        )
        await callback_query.message.edit_text(message_text, parse_mode="HTML")
        await callback_query.answer(f"–í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞ {proper_game_name}")
    await asyncio.sleep(2)
    keyboard = create_main_menu_keyboard()
    await callback_query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

@router.callback_query(mode_callback_filter)
async def process_mode_selection(callback_query: types.CallbackQuery, state: FSMContext):
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return
    if not callback_query.data:
        await callback_query.answer("Error: Missing callback data.")
        return
    from ..keyboards import TRADING_MODES
    selected_mode = callback_query.data.split("_", 1)[1]
    user_id = callback_query.from_user.id if callback_query.from_user else "Unknown"
    if selected_mode in TRADING_MODES:
        mode_info = TRADING_MODES[selected_mode]
        await state.update_data(
            selected_mode=selected_mode,
            min_profit=mode_info["min_profit"],
            max_profit=mode_info["max_profit"]
        )
        logger.info(f"User {user_id} selected trading mode: {mode_info['name']}")
        message_text = (
            f"{mode_info['emoji']} <b>–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: {mode_info['name']}</b>\n\n"
            f"<b>üìã –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
            f"{mode_info['description']}\n\n"
            f"<b>üí∞ –î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–∏–±—ã–ª–∏:</b> "
            f"${mode_info['min_profit']}-${mode_info['max_profit']}\n\n"
            f"‚úÖ <i>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å "
            f"–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.</i>"
        )
        await callback_query.message.edit_text(message_text, parse_mode="HTML")
        await callback_query.answer("–†–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω!")
        await asyncio.sleep(2)
        keyboard = create_main_menu_keyboard()
        await callback_query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    else:
        logger.warning(f"User {user_id} selected unknown mode: {selected_mode}")
        await callback_query.message.edit_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.")
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º")
        await asyncio.sleep(2)
        keyboard = create_main_menu_keyboard()
        await callback_query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

@router.callback_query(lambda c: c.data == "back_to_main_menu")
async def process_back_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return
    current_state = await state.get_state()
    if current_state == FilterStates.browsing_offers:
        await state.clear()
    keyboard = create_main_menu_keyboard()
    await callback_query.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(lambda c: c.data == "show_offers")
async def process_show_offers(callback_query: types.CallbackQuery, state: FSMContext):
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return
    # --- Mock dmarket_api_client for now ---
    # This is a placeholder. Replace with actual API client import and call.
    class MockDMarketApiClient:
        async def find_arbitrage_opportunities(self, game, min_profit, max_profit, limit, cursor=None):
            # Simulate API call
            print(f"Mock API: Searching {game} profit ${min_profit}-${max_profit} limit {limit} cursor {cursor}")
            await asyncio.sleep(1)
            if cursor == "page_1": # Simulate second page
                return {
                    "items": [
                        {'game': game, 'name': f'Item {i+limit}', 'buy_price': 15.0, 'sell_price': 25.0, 'profit': 10.0} 
                        for i in range(limit)
                    ],
                    "cursor": None, # No more pages after this
                    "has_next_page": False
                }
            else: # Simulate first page
                return {
                    "items": [
                        {'game': game, 'name': f'Item {i}', 'buy_price': 10.0, 'sell_price': 20.0, 'profit': 10.0} 
                        for i in range(limit)
                    ],
                    "cursor": "page_1", # Cursor for next page
                    "has_next_page": True
                }
    dmarket_api_client = MockDMarketApiClient()
    # --- End Mock ---

    from ..keyboards import TRADING_MODES
    user_data = await state.get_data()
    selected_mode = user_data.get("selected_mode", "balance_boost")
    selected_games = user_data.get("selected_games", ["CS2"]) # Default to CS2
    min_profit = float(user_data.get("min_profit", TRADING_MODES.get(selected_mode, {}).get("min_profit", 1)))
    max_profit = float(user_data.get("max_profit", TRADING_MODES.get(selected_mode, {}).get("max_profit", 100)))
    
    mode_name = "–Ω–µ –≤—ã–±—Ä–∞–Ω"
    mode_emoji = "\U00002753"  # ‚ùì
    if selected_mode in TRADING_MODES:
        mode_name = TRADING_MODES[selected_mode]["name"]
        mode_emoji = TRADING_MODES[selected_mode]["emoji"]
    
    games_str = ", ".join(selected_games) if selected_games else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
    
    search_game = "cs2" # Default search game
    if selected_games and len(selected_games) == 1:
        search_game = selected_games[0].lower()
    elif selected_games: # If multiple games selected, maybe default to cs2 or make it explicit? For now, using cs2.
        search_game = "cs2" 
        # Or perhaps indicate search across all selected? API needs to support this.

    message_text = (
        f"üîç <b>–ü–æ–∏—Å–∫ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b>\n\n"
        f"<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:</b>\n"
        f"{mode_emoji} <b>–†–µ–∂–∏–º:</b> {mode_name}\n"
        f"üéÆ <b>–ò–≥—Ä—ã:</b> {games_str}\n"
        f"üí∞ <b>–ü—Ä–∏–±—ã–ª—å:</b> –æ—Ç <b>${min_profit:.2f}</b> –¥–æ <b>${max_profit:.2f}</b>\n\n"
        f"<i>–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π... —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.</i>\n"
        f"<i>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.</i>"
    )
    await callback_query.message.edit_text(message_text, parse_mode="HTML")
    await callback_query.answer("–ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...")
    
    try:
        # Assume API only searches one game at a time for now
        search_result = await dmarket_api_client.find_arbitrage_opportunities(
            game=search_game, 
            min_profit=min_profit,
            max_profit=max_profit,
            limit=PAGE_SIZE
        )
        offers = search_result.get("items", [])
        cursor = search_result.get("cursor")
        has_next_page = search_result.get("has_next_page", False)
        
        total_pages_estimate = 10 if has_next_page else 1 # Placeholder for total pages
        
        await state.update_data(
            offers_page=1,
            offers_cursor=cursor,
            offers_game=search_game,
            offers_min_profit=min_profit,
            offers_max_profit=max_profit,
            offers_has_next_page=has_next_page,
            offers_total_pages=total_pages_estimate # Store estimated total
        )
        await state.set_state(FilterStates.browsing_offers)
        
        results_text = format_offers_message(offers, 1, total_pages_estimate)
        keyboard = create_pagination_keyboard(page=1, total_pages=total_pages_estimate, has_next_page=has_next_page, has_prev_page=False)
        
        # Send results in a new message
        await callback_query.message.answer(results_text, parse_mode="HTML", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"Error searching for offers: {e}", exc_info=True)
        error_keyboard = create_main_menu_keyboard()
        await callback_query.message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:\n"
            f"<code>{str(e)}</code>\n\n"
            f"<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>",
            parse_mode="HTML",
            reply_markup=error_keyboard
        )

@router.callback_query(pagination_callback_filter)
async def process_pagination(callback_query: types.CallbackQuery, state: FSMContext):
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return
    if not callback_query.data:
        await callback_query.answer("Error: Missing callback data.")
        return
        
    # --- Use Mock dmarket_api_client again ---
    class MockDMarketApiClient:
        async def find_arbitrage_opportunities(self, game, min_profit, max_profit, limit, cursor=None):
            print(f"Mock API Paginate: Searching {game} profit ${min_profit}-${max_profit} limit {limit} cursor {cursor}")
            await asyncio.sleep(0.5)
            if cursor == "page_1":
                return {
                    "items": [
                        {'game': game, 'name': f'Paginated Item {i+limit}', 'buy_price': 16.0, 'sell_price': 26.0, 'profit': 10.0} 
                        for i in range(limit)
                    ],
                    "cursor": "page_2", # Cursor for page 3
                    "has_next_page": True
                }
            elif cursor == "page_2": # Simulate third page
                 return {
                    "items": [
                        {'game': game, 'name': f'Paginated Item {i+limit*2}', 'buy_price': 17.0, 'sell_price': 27.0, 'profit': 10.0} 
                        for i in range(limit)
                    ],
                    "cursor": None, # No more pages
                    "has_next_page": False
                }
            else: # Should not happen in this mock if logic is correct
                 return {"items": [], "cursor": None, "has_next_page": False}
    dmarket_api_client = MockDMarketApiClient()
    # --- End Mock ---

    user_data = await state.get_data()
    current_page = user_data.get("offers_page", 1)
    cursor = user_data.get("offers_cursor")
    game = user_data.get("offers_game", "cs2")
    min_profit = user_data.get("offers_min_profit", 1.0)
    max_profit = user_data.get("offers_max_profit", 100.0)
    total_pages = user_data.get("offers_total_pages", 1) # Get stored total pages
    
    action = callback_query.data.split("_")[1]
    new_page = current_page
    search_cursor = None
    
    if action == "next" and cursor:
        new_page = current_page + 1
        search_cursor = cursor
    elif action == "prev" and current_page > 1:
        # Pagination logic for 'prev' is tricky without storing previous cursors.
        # For this example, we'll assume the API doesn't directly support going back.
        # A real implementation might need to re-fetch or store cursor history.
        await callback_query.answer("–§—É–Ω–∫—Ü–∏—è '–ù–∞–∑–∞–¥' –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
        return 
        # new_page = current_page - 1
        # # Need a way to get the cursor for the *previous* page. This often requires 
        # # storing cursor history or making the API support page numbers/offsets.
        # search_cursor = user_data.get(f"offers_cursor_page_{new_page}") # Example if storing history
    else:
        await callback_query.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
        return

    if search_cursor is None and action != "prev": # Prevent search if no cursor for next page
        await callback_query.answer("–ù–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        return
        
    try:
        await callback_query.answer("–ó–∞–≥—Ä—É–∑–∫–∞...") # Provide feedback
        search_result = await dmarket_api_client.find_arbitrage_opportunities(
            game=game,
            min_profit=min_profit,
            max_profit=max_profit,
            limit=PAGE_SIZE,
            cursor=search_cursor
        )
        offers = search_result.get("items", [])
        next_cursor = search_result.get("cursor")
        has_next_page = search_result.get("has_next_page", False)
        
        # Update total pages estimate if we discover there's no next page earlier than expected
        if not has_next_page and total_pages > new_page:
            total_pages = new_page
            
        await state.update_data(
            offers_page=new_page,
            offers_cursor=next_cursor, # Store cursor for the *next* page
            offers_has_next_page=has_next_page,
            offers_total_pages=total_pages # Update total pages estimate
            # Consider storing previous cursors here if needed: f"offers_cursor_page_{new_page}": cursor
        )
        
        results_text = format_offers_message(offers, new_page, total_pages)
        keyboard = create_pagination_keyboard(page=new_page, total_pages=total_pages, has_next_page=has_next_page, has_prev_page=new_page > 1)
        
        await callback_query.message.edit_text(results_text, parse_mode="HTML", reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"Error during pagination: {e}", exc_info=True)
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        # Optionally edit message to show error
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=create_main_menu_keyboard()
        )


@router.callback_query(lambda c: c.data == "show_help")
async def process_show_help(callback_query: types.CallbackQuery):
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return
    # Reusing help text logic from commands.py for consistency is better
    # but for this example, duplicating it slightly modified for callback context
    help_text = (
        "üìö <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n\n"
        "üîç <b>–ü–æ–∏—Å–∫ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b> - –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ DMarket "
        "—Å –Ω–∞–∏–ª—É—á—à–∏–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏.\n\n"
        "üéÆ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–≥—Ä—ã:</b>\n"
        "‚Ä¢ üî´ CS2 (Counter-Strike 2)\n"
        "‚Ä¢ üßô‚Äç‚ôÇÔ∏è Dota 2\n"
        "‚Ä¢ üé© Team Fortress 2 (TF2)\n"
        "‚Ä¢ üèùÔ∏è Rust\n\n"
        "<b>–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:</b>\n"
        "‚Ä¢ üí∏ <b>–†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞</b> - –ø—Ä–µ–¥–º–µ—Ç—ã —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏–±—ã–ª—å—é ($1-5) –∏ –Ω–∏–∑–∫–∏–º —Ä–∏—Å–∫–æ–º\n"
        "‚Ä¢ üí∞ <b>–°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä</b> - –ø—Ä–µ–¥–º–µ—Ç—ã —Å–æ —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–∏–±—ã–ª—å—é ($5-20)\n"
        "‚Ä¢ üìà <b>Trade Pro</b> - —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π –ø—Ä–∏–±—ã–ª—å—é ($20+)\n\n"
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è/–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å)\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –≤—Å–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
        "4. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è' –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
        "5. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n\n"
        "<i>–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>"
    )
    from aiogram.utils.keyboard import InlineKeyboardBuilder # Local import for clarity
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")
    keyboard = builder.as_markup()
    await callback_query.message.edit_text(help_text, reply_markup=keyboard, parse_mode="HTML")
    await callback_query.answer("–ü–æ–∫–∞–∑–∞–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É") 