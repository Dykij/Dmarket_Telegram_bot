"""
Модели данных для системы мониторинга цен.

Модуль содержит базовые модели данных, используемые для представления
предметов, предложений и другой информации из различных маркетплейсов.
"""

from dataclasses import dataclass


# Заглушка для BaseItemOffer
@dataclass
class BaseItemOffer:
    """
    Базовая модель для предложения о продаже предмета.

    Представляет общую структуру предложения, включая название предмета,
    исходную цену, цену продажи и краткое описание. Используется как
    основа для конкретных реализаций предложений с разных маркетплейсов.

    Attributes:
        market_name: Название предмета на маркетплейсе
        orig_price: Исходная/рыночная цена предмета
        sell_price: Цена продажи предмета
        short_title: Краткое описание предложения
    """

    market_name: str
    orig_price: float
    sell_price: float
    short_title: str = "UNKNOWN"

    def compute_percentage(self) -> float:
        """
        Вычисляет процентную разницу между исходной ценой и ценой продажи.

        Возвращает положительное значение если цена продажи ниже исходной
        (т.е. выгодное предложение).

        Returns:
            float: Процентная разница между ценами, округлённая до 2 знаков
        """
        if self.orig_price <= 0:
            return 0.0
        return round((self.orig_price - self.sell_price) / self.orig_price * 100, 2)

    def create_notification(self):
        """
        Создаёт уведомление на основе данных предложения.

        Метод-заглушка для создания уведомления, который должен быть
        переопределен в производных классах для конкретных
        типов уведомлений в зависимости от маркетплейса.
        """


# Можно добавить экспорт DMarketItem, если он используется где-то еще через models
# from .dmarket import DMarketItem
# __all__ = ["BaseItemOffer", "DMarketItem"]

__all__ = ["BaseItemOffer"]
