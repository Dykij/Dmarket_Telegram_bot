"""Game selection handlers for the Telegram bot."""

import asyncio
import logging
from aiogram import Router, types
from aiogram.fsm.context import FSMContext

from price_monitoring.telegram.bot.keyboards.game_selection import (
    create_game_selection_keyboard
)
from price_monitoring.telegram.bot.keyboards.main_menu import (
    create_main_menu_keyboard
)
from price_monitoring.telegram.bot.constants.games import (
    SUPPORTED_GAMES,
    GAME_EMOJIS
)
from price_monitoring.telegram.bot.filters.callback_filters import (
    game_callback_filter
)

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(lambda c: c.data == "select_games")
async def process_select_games(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—ã".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∏–≥—Ä–∞–º–∏.
    
    Args:
        callback_query: Callback query –æ—Ç Telegram
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if not callback_query.message or not isinstance(
        callback_query.message, types.Message
    ):
        await callback_query.answer(
            "Cannot process: "
            "original message not found or inaccessible."
        )
        return
    
    keyboard = create_game_selection_keyboard()
    await callback_query.message.edit_text(
        "üéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –∏–≥—Ä—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –∏–≥—Ä—ã "
        "–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –∏–≥—Ä–∞–º.\n\n"
        "<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–≥—Ä—ã: CS2, Dota2, TF2, Rust</i>", 
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å '—á–∞—Å–∏–∫–∏' —É –∫–Ω–æ–ø–∫–∏
    await callback_query.answer()


@router.callback_query(game_callback_filter)
async def process_game_selection(
    callback_query: types.CallbackQuery, 
    state: FSMContext
):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã –∏–ª–∏ –≤—Å–µ—Ö –∏–≥—Ä.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        callback_query: Callback query –æ—Ç Telegram
        state: –û–±—ä–µ–∫—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if not callback_query.message or not isinstance(
        callback_query.message, types.Message
    ):
        await callback_query.answer(
            "Cannot process: "
            "original message not found or inaccessible."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ callback_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Ö–æ—Ç—è lambda —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç)
    if not callback_query.data:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await callback_query.answer("Error: Missing callback data.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—É –∏–∑ callback_data (cs2, dota2, all)
    selected_game = callback_query.data.split("_", 1)[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    user_id = (
        callback_query.from_user.id
        if callback_query.from_user
        else "Unknown"
    )
    
    # –ü–æ–ª—É—á–∞–µ–º emoji –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
    game_emoji = "‚úÖ" if selected_game == "all" else GAME_EMOJIS.get(
        selected_game.upper(), "üéÆ"
    )

    if selected_game == "all":
        log_message = f"User {user_id} selected all games."
        logger.info(log_message)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ state
        await state.update_data(selected_games=SUPPORTED_GAMES)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤—Å–µ—Ö –∏–≥—Ä
        message_text = (
            f"{game_emoji} <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ –∏–≥—Ä—ã</b>\n\n"
            f"–ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –ø–æ –≤—Å–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –∏–≥—Ä–∞–º: "
            f"<b>{', '.join(SUPPORTED_GAMES)}</b>\n\n"
            f"<i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª –≤—ã–±–æ—Ä–∞ –∏–≥—Ä.</i>"
        )
        
        await callback_query.message.edit_text(
            message_text,
            parse_mode="HTML"
        )
        await callback_query.answer("–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∏–≥—Ä—ã")
    else:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        proper_game_name = next(
            (game for game in SUPPORTED_GAMES 
             if game.lower() == selected_game),
            selected_game.upper()
        )
        
        log_message = f"User {user_id} selected game: {selected_game}"
        logger.info(log_message)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ state
        await state.update_data(selected_games=[proper_game_name])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
        message_text = (
            f"{game_emoji} <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: {proper_game_name}</b>\n\n"
            f"–ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º —ç—Ç–æ–π –∏–≥—Ä—ã.\n\n"
            f"<i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª –≤—ã–±–æ—Ä–∞ –∏–≥—Ä.</i>"
        )
        
        await callback_query.message.edit_text(
            message_text,
            parse_mode="HTML"
        )
        await callback_query.answer(f"–í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞ {proper_game_name}")

    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await asyncio.sleep(2)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = create_main_menu_keyboard()
    await callback_query.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=keyboard
    ) 