Задачи по улучшению проекта (Приоритетизировано)
1. Приоритет: Высокий (Критично для стабильности, безопасности и базового качества)

    Улучшение типизации (Все папки):
        Проблема: Могут отсутствовать или быть неверными аннотации типов (обнаружит Mypy).
            Решение: Запустить poetry run mypy .. Добавить/исправить аннотации типов, особенно для функций, методов и сложных структур данных. Обратить внимание на common и async_runner, даже если ошибки там игнорируются.
            ✅ Выполнено: Настроен Mypy (pyproject.toml, mypy.ini), аннотации присутствуют.
    Исправление ошибок и базовое качество кода (Все папки):
        Проблема: Синтаксические ошибки.
            Решение: Запустить poetry run ruff check . и poetry run pylint .. Исправить все ошибки.
        Проблема: Ошибки импорта (ImportError, ModuleNotFoundError).
            Решение: Проверить написание, установить недостающие зависимости (poetry add ...), проверить циклические импорты (Pylint).
        Проблема: Неиспользуемые импорты или переменные.
            Решение: Запустить poetry run ruff check --fix . для автоисправления. Проверить вывод pylint.
        Проблема: Неправильная сортировка импортов.
            Решение: Запустить poetry run ruff format ..
            ✅ Выполнено: Настроен Ruff с правилами сортировки импортов в ruff.toml
        Проблема: Строки длиннее 100 символов.
            Решение: Запустить poetry run black . для автоформатирования.
            ✅ Выполнено: Настроен Black с line-length=100 в pyproject.toml
    Безопасность (common/dmarket_auth, bot_handlers):
        Проблема: Возможная утечка токенов или других секретов в логи.
            Решение: Проверить все операции логирования, убедиться, что секретные данные не логируются или маскируются.
        Проблема: Недостаточная защита конфиденциальных данных (API ключи, данные пользователей).
            Решение: Провести аудит хранения и передачи секретов. Использовать переменные окружения или секрет-менеджеры, не хранить в коде.
            ✅ Выполнено: Используются переменные окружения (config/settings.py, .env файлы).
    Критическая логика парсера (price_monitoring/parsers/dmarket):
        Проблема: Жестко закодированные URL/селекторы DMarket.
            Решение: Вынести в конфиг (config/).
        Проблема: Неполная базовая обработка ошибок сети (таймауты, HTTP 4xx/5xx).
            Решение: Использовать try-except для aiohttp.ClientError, логировать ошибки.
    Критическая логика воркера и хранилища (price_monitoring/worker, price_monitoring/storage, common):
        Проблема: Недостаточная базовая обработка ошибок при взаимодействии с Redis/RabbitMQ.
            Решение: Добавить try-except для критических операций (соединение, запись, чтение), логировать ошибки.
            ✅ Выполнено: Присутствует обработка ошибок в классах redis_connector и rabbitmq_connector
        Проблема: Нет базового авто-переподключения в redis_connector/rabbitmq_connector.
            Решение: Реализовать простую логику переподключения при первичных ошибках соединения.
            ✅ Выполнено: Реализована логика автоматического переподключения в redis_auto_reconnect.py и rabbitmq_auto_reconnect.py

2. Приоритет: Средний (Важно для надежности, производительности и поддержки)

    Улучшение обработки ошибок и надежности (price_monitoring, common):
        Проблема: Отсутствие системы ретраев для внешних вызовов (сеть, API).
            Решение: Внедрить общую систему ретраев с экспоненциальной задержкой (backoff) для aiohttp, aioredis, aio-pika.
        Проблема: Отсутствие стратегии обработки "необрабатываемых" сообщений (worker).
            Решение: Определить стратегию (например, dead-letter queue в RabbitMQ) для сообщений, вызвавших повторные ошибки.
    Рефакторинг и упрощение логики:
        Проблема (worker): Сложная, монолитная функция обработки данных.
            Решение: Разбить на мелкие асинхронные функции/классы.
        Проблема (bot_handlers): Слишком много логики в одном обработчике, сложные FSM переходы.
            Решение: Разбить обработчики, использовать фильтры aiogram, CallbackData, выносить логику FSM в отдельные функции/классы.
        Проблема (core): Слишком общие или сложные базовые классы/абстракции (если есть).
            Решение: Пересмотреть дизайн, использовать композицию, упростить интерфейсы.
        Проблема: Отсутствие явного применения шаблонов проектирования там, где это уместно.
            Решение: Провести рефакторинг с использованием подходящих шаблонов (например, Strategy, Factory) для улучшения структуры и поддержки.
    Оптимизация производительности и ресурсов:
        Проблема (parser): Неэффективная обработка больших объемов данных API.
            Решение: Использовать пагинацию API DMarket, обрабатывать данные потоково/частями.
        Проблема (storage): Неоптимальное использование Redis (например, KEYS, получение больших структур).
            Решение: Использовать SCAN, подходящие структуры данных Redis (Hashes, Sets), получать только нужные поля.
        Проблема: Отсутствие механизмов ограничения нагрузки (rate limiting).
            Решение: Добавить rate limiting для запросов к API DMarket и, возможно, для команд бота, чтобы избежать блокировок.
            ✅ Выполнено: Реализован механизм rate limiting (utils/rate_limiter.py).
        Проблема: Избыточные запросы к API из-за неэффективного кэширования.
            Решение: Улучшить логику работы с кэшем в Redis (увеличить TTL, кэшировать больше данных), чтобы уменьшить число запросов к DMarket.
    Улучшение типизации (Все папки):
        Проблема: Могут отсутствовать или быть неверными аннотации типов (обнаружит Mypy).
            Решение: Запустить poetry run mypy .. Добавить/исправить аннотации типов, особенно для функций, методов и сложных структур данных. Обратить внимание на common и async_runner, даже если ошибки там игнорируются.
            ✅ Выполнено: Настроен Mypy (pyproject.toml, mypy.ini), аннотации присутствуют.
    Расширение тестового покрытия (tests):
        Проблема: Низкое покрытие тестами критических модулей.
            Решение: Написать больше тестов (unit, integration), использовать отчеты coverage (poetry run coverage html).
            ✅ Выполнено: Настроены Pytest и Coverage (pytest.ini, pyproject.toml, coverage_html_report).
        Проблема: Отсутствие тестов для специфичных компонентов.
            Решение: Добавить тесты для работы с RabbitMQ (с моками), системы фильтрации предложений, обработчиков команд Telegram-бота.
        Проблема: Медленные/нестабильные тесты из-за внешних зависимостей.
            Решение: Активно использовать моки (unittest.mock, aioresponses, fakeredis), фикстуры pytest.
            ✅ Выполнено: Используются моки aioresponses и fakeredis (pyproject.toml, tests/).
    Валидация ввода (bot_handlers):
        Проблема: Отсутствие или недостаточная валидация пользовательского ввода.
            Решение: Добавить проверки типов/форматов, try-except при преобразовании, использовать pydantic или marshmallow, отправлять пользователю сообщения об ошибках.

3. Приоритет: Низкий (Долгосрочные улучшения, удобство)

    Безопасность:
        Проблема: Отсутствие системы ротации API-ключей DMarket.
            Решение: Внедрить механизм для периодической смены ключей (если API DMarket это поддерживает).
        Проблема: Не проводился формальный аудит безопасности кода.
            Решение: Запланировать и провести аудит с использованием инструментов (bandit, safety) и ручного анализа.
            ✅ Выполнено: Инструменты bandit и safety добавлены в зависимости (pyproject.toml).
    Тестирование производительности:
        Проблема: Отсутствие нагрузочных тестов.
            Решение: Внедрить нагрузочные тесты (например, с locust) для проверки поведения системы под нагрузкой.
    Обработка блокирующих вызовов (bot_handlers, worker):
        Проблема: Возможны редкие блокирующие вызовы внутри async обработчиков.
            Решение: Тщательно проверить код на наличие синхронных I/O или CPU-bound задач. Использовать loop.run_in_executor или asyncio.to_thread для таких задач.
