import logging
import asyncio
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from ..keyboards import create_filter_settings_keyboard
from ..states import FilterStates

logger = logging.getLogger(__name__)
router = Router()

@router.callback_query(lambda c: c.data == "filter_set_min_profit")
async def process_set_min_profit(callback_query: types.CallbackQuery, state: FSMContext):
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return
    await callback_query.message.edit_text(
        "üíµ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):\n\n"
        "<i>–≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. "
        "–ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –ø—Ä–∏–±—ã–ª—å—é –±–æ–ª—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π.</i>",
        parse_mode="HTML"
    )
    await state.set_state(FilterStates.waiting_min_profit)
    await callback_query.answer()

@router.message(StateFilter(FilterStates.waiting_min_profit))
async def process_min_profit_value(message: types.Message, state: FSMContext):
    if not message.text:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5.5")
        return
    try:
        min_profit = float(message.text)
        if min_profit < 0:
            await message.reply(
                "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
            )
            return
        await state.update_data(min_profit=min_profit)
        user_id = message.from_user.id if message.from_user else "Unknown"
        logger.info(f"User {user_id} set min_profit to {min_profit}")
        await state.clear()
        confirm_message = await message.reply(
            f"‚úÖ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${min_profit:.2f}</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è "
            f"—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –ø—Ä–∏–±—ã–ª—å—é –æ—Ç ${min_profit:.2f}.",
            parse_mode="HTML"
        )
        await asyncio.sleep(2)
        keyboard = create_filter_settings_keyboard()
        await confirm_message.reply(
            "üõ†Ô∏è <b>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤?</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5.5")

@router.callback_query(lambda c: c.data == "filter_set_max_profit")
async def process_set_max_profit(callback_query: types.CallbackQuery, state: FSMContext):
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return
    await callback_query.message.edit_text(
        "üí∏ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20):\n\n"
        "<i>–≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. "
        "–ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –ø—Ä–∏–±—ã–ª—å—é –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π.</i>",
        parse_mode="HTML"
    )
    await state.set_state(FilterStates.waiting_max_profit)
    await callback_query.answer()

@router.message(StateFilter(FilterStates.waiting_max_profit))
async def process_max_profit_value(message: types.Message, state: FSMContext):
    if not message.text:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 20 –∏–ª–∏ 25.5")
        return
    try:
        max_profit = float(message.text)
        if max_profit < 0:
            await message.reply(
                "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
            )
            return
        data = await state.get_data()
        min_profit = data.get("min_profit", 0)
        if max_profit < min_profit:
            await message.reply(
                f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π "
                f"(${min_profit:.2f}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
            )
            return
        await state.update_data(max_profit=max_profit)
        user_id = message.from_user.id if message.from_user else "Unknown"
        logger.info(f"User {user_id} set max_profit to {max_profit}")
        await state.clear()
        confirm_message = await message.reply(
            f"‚úÖ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${max_profit:.2f}</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è "
            f"—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –ø—Ä–∏–±—ã–ª—å—é –æ—Ç ${min_profit:.2f} –¥–æ ${max_profit:.2f}.",
            parse_mode="HTML"
        )
        await asyncio.sleep(2)
        keyboard = create_filter_settings_keyboard()
        await confirm_message.reply(
            "üõ†Ô∏è <b>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤?</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except ValueError:
        await message.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 20 –∏–ª–∏ 25.5") 