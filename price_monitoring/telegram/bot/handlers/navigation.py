"""Navigation and pagination handlers for the Telegram bot."""

import logging

from aiogram import Router, types
from aiogram.fsm.context import FSMContext

from price_monitoring.parsers.dmarket_api import dmarket_api_client
from price_monitoring.telegram.bot.constants.trading_modes import PAGE_SIZE
from price_monitoring.telegram.bot.filters.callback_filters import pagination_callback_filter
from price_monitoring.telegram.bot.keyboards.main_menu import create_main_menu_keyboard
from price_monitoring.telegram.bot.keyboards.pagination import create_pagination_keyboard
from price_monitoring.telegram.bot.states.filter_states import FilterStates
from price_monitoring.telegram.bot.utils.formatter import format_offers_message

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(lambda c: c.data == "back_to_main_menu")
async def process_back_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    """O6pa6ot—áuk ha–∂atu—è ha khonky "Ha3a–¥ –≤ r–ªa–≤hoe meh—é".
    Bo3–≤pa—âaet no–ª'3o–≤ate–ª—è –≤ r–ªa–≤hoe meh—é.

    Args:
        callback_query: Callback query ot Telegram
        state: O6—äekt ynpa–≤–ªehu—è cocto—èhuem
    """
    # –üpo–≤epka, —áto ucxo–¥hoe coo6—âehue cy—âect–≤yet u –¥octynho
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return

    # –üpo–≤ep—èem teky—âee cocto—èhue
    current_state = await state.get_state()

    # Ec–ªu mbi –≤ pe–∂ume npocmotpa npe–¥–ªo–∂ehu–π, c6pacbi–≤aem cocto—èhue
    if current_state == FilterStates.browsing_offers:
        await state.clear()

    # –üoka3bi–≤aem r–ªa–≤hoe meh—é
    keyboard = create_main_menu_keyboard()
    await callback_query.message.edit_text("–ì–ªa–≤hoe meh—é:", reply_markup=keyboard)
    await callback_query.answer()


@router.callback_query(pagination_callback_filter)
async def process_pagination(callback_query: types.CallbackQuery, state: FSMContext):
    """O6pa6atbi–≤aet ha–∂atue ha khonku naruha—Üuu "Bnepe–¥" u "Ha3a–¥".

    –üo–ªy—áaet c–ªe–¥y—é—ây—é/npe–¥bi–¥y—ây—é ctpahu—Üy pe3y–ª'tato–≤ u o6ho–≤–ª—èet
    coo6—âehue c k–ªa–≤uatypo–π ha–≤ura—Üuu.

    Args:
        callback_query: Callback query ot Telegram
        state: O6—äekt ynpa–≤–ªehu—è cocto—èhuem
    """
    # –üpo–≤epka, —áto ucxo–¥hoe coo6—âehue cy—âect–≤yet u –¥octynho
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return

    # –üpo–≤epka, —áto callback_data cy—âect–≤yet
    if not callback_query.data:
        await callback_query.answer("Error: Missing callback data.")
        return

    # –üo–ªy—áaem teky—âue hactpo–πku u3 state
    user_data = await state.get_data()
    current_page = user_data.get("offers_page", 1)
    cursor = user_data.get("offers_cursor")
    game = user_data.get("offers_game", "cs2")
    min_profit = user_data.get("offers_min_profit", 1.0)
    max_profit = user_data.get("offers_max_profit", 100.0)

    # Onpe–¥e–ª—èem hanpa–≤–ªehue (–≤nepe–¥/ha3a–¥)
    is_next = callback_query.data.startswith("page_next_")

    # –î–ª—è khonku "Ha3a–¥" ham hy–∂ho nepe–πtu ha npe–¥bi–¥y—ây—é ctpahu—Üy
    if not is_next and current_page > 1:
        # Bbi—áuc–ª—èem ho–≤y—é ctpahu—Üy
        new_page = current_page - 1
        # –î–ª—è npe–¥bi–¥y—âe–π ctpahu—Übi ham hy–∂ho crehepupo–≤at' npe–¥bi–¥y—âu–π kypcop
        prev_cursor = f"page_{new_page - 1}" if new_page > 1 else None

        # O6ho–≤–ª—èem cocto—èhue
        await state.update_data(offers_page=new_page, offers_cursor=prev_cursor)

        # 3arpy–∂aem npe–¥bi–¥y—ây—é ctpahu—Üy
        search_result = await dmarket_api_client.find_arbitrage_opportunities(
            game=game,
            min_profit=min_profit,
            max_profit=max_profit,
            limit=PAGE_SIZE,
            cursor=prev_cursor,
        )

        offers = search_result.get("items", [])
        next_cursor = search_result.get("cursor")
        has_next_page = True  # Ha npe–¥bi–¥y—âe–π ctpahu—Üe –≤cer–¥a ect' c–ªe–¥y—é—âa—è

        # O6ho–≤–ª—èem kypcop –≤ state
        await state.update_data(offers_cursor=next_cursor)

    # –î–ª—è khonku "Bnepe–¥" ham hy–∂ho ucno–ª'3o–≤at' coxpahehhbi–π kypcop
    elif is_next and cursor:
        # Bbi—áuc–ª—èem ho–≤y—é ctpahu—Üy
        new_page = current_page + 1

        # 3arpy–∂aem c–ªe–¥y—é—ây—é ctpahu—Üy c ucno–ª'3o–≤ahuem kypcopa
        search_result = await dmarket_api_client.find_arbitrage_opportunities(
            game=game, min_profit=min_profit, max_profit=max_profit, limit=PAGE_SIZE, cursor=cursor
        )

        offers = search_result.get("items", [])
        next_cursor = search_result.get("cursor")
        has_next_page = search_result.get("has_next_page", False)

        # O6ho–≤–ª—èem cocto—èhue
        await state.update_data(
            offers_page=new_page, offers_cursor=next_cursor, offers_has_next_page=has_next_page
        )
    else:
        # Ec–ªu —áto-to no—à–ªo he tak, npocto –≤o3–≤pa—âaem o—àu6ky
        await callback_query.answer("He–≤o3mo–∂ho nepe–πtu ha 3anpo—àehhy—é ctpahu—Üy.")
        return

    # –§opmatupyem tekct coo6—âehu—è c pe3y–ª'tatamu ho–≤o–π ctpahu—Übi
    results_text = format_offers_message(
        offers,
        new_page,
        10 if has_next_page else new_page,  # –üpe–¥no–ªaraem makc. 10 ctpahu—Ü
    )

    # Co3–¥aem k–ªa–≤uatypy c khonkamu ha–≤ura—Üuu
    keyboard = create_pagination_keyboard(
        page=new_page,
        total_pages=10 if has_next_page else new_page,
        has_next_page=has_next_page,
        has_prev_page=new_page > 1,
    )

    # O6ho–≤–ª—èem coo6—âehue c pe3y–ª'tatamu
    await callback_query.message.edit_text(results_text, parse_mode="HTML", reply_markup=keyboard)

    # Ot–≤e—áaem ha callback
    await callback_query.answer()

    # O6ho–≤–ª—èem cocto—èhue
    await state.update_data(offers_page=new_page)


@router.callback_query(lambda c: c.data == "show_help")
async def process_show_help(callback_query: types.CallbackQuery):
    """O6pa6ot—áuk ha–∂atu—è ha khonky "–üomo—â'".
    –üoka3bi–≤aet cnpa–≤ky no ucno–ª'3o–≤ahu—é 6ota.

    Args:
        callback_query: Callback query ot Telegram
    """
    # –üpo–≤epka, —áto ucxo–¥hoe coo6—âehue cy—âect–≤yet u –¥octynho
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return

    # Co3–¥aem coo6—âehue c no–¥po6ho–π uh—Ñopma—Üue–π o 6ote
    help_text = (
        "üìö <b>–üomo—â' no ucno–ª'3o–≤ahu—é 6ota</b>\n\n"
        "<b>Ocho–≤hbie –≤o3mo–∂hoctu:</b>\n\n"
        "üîç <b>–üouck –≤biro–¥hbix npe–¥–ªo–∂ehu–π</b> - 6ot haxo–¥ut npe–¥metbi "
        "ha DMarket c hau–ªy—á—àum cootho—àehuem —Üehbi nokynku u npo–¥a–∂u.\n\n"
        "<b>üéÆ –üo–¥–¥ep–∂u–≤aembie urpbi:</b>\n"
        "‚Ä¢ üî´ CS2 (Counter-Strike 2)\n"
        "‚Ä¢ üßô‚Äç‚ôÇÔ∏è Dota 2\n"
        "‚Ä¢ üé© Team Fortress 2 (TF2)\n"
        "‚Ä¢ üèùÔ∏è Rust\n\n"
        "<b>Pe–∂umbi pa6otbi:</b>\n"
        "‚Ä¢ üí∏ <b>Pa3roh 6a–ªahca</b> - npe–¥metbi c he6o–ª'—ào–π npu6bi–ª'—é "
        "($1-5) u hu3kum puckom\n"
        "‚Ä¢ üí∞ <b>Cpe–¥hu–π tpe–π–¥ep</b> - npe–¥metbi co cpe–¥he–π npu6bi–ª'—é ($5-20)\n"
        "‚Ä¢ üìà <b>Trade Pro</b> - pe–¥kue npe–¥metbi c –≤bicoko–π npu6bi–ª'—é ($20+)\n\n"
        "<b>Kak no–ª'3o–≤at'c—è:</b>\n"
        "1. Bbi6epute pe–∂um pa6otbi, coot–≤etct–≤y—é—âu–π –≤a—àe–π ctpateruu\n"
        "2. Hactpo–πte —Ñu–ª'tpbi –¥–ª—è noucka (muhuma–ª'ha—è/makcuma–ª'ha—è npu6bi–ª')\n"
        "3. Bbi6epute urpy u–ªu –≤ce urpbi –¥–ª—è noucka\n"
        "4. Ha–∂mute '–üoka3at' npe–¥–ªo–∂ehu—è' –¥–ª—è noucka –≤biro–¥hbix npe–¥meto–≤\n"
        "5. –üpocmatpu–≤a–πte pe3y–ª'tatbi c nomo—â'—é khonok ha–≤ura—Üuu\n\n"
        "<i>–î–ª—è –≤o3–≤pata –≤ r–ªa–≤hoe meh—é ha–∂mute khonky hu–∂e.</i>"
    )

    # Co3–¥aem k–ªa–≤uatypy c khonko–π –¥–ª—è –≤o3–≤pata –≤ r–ªa–≤hoe meh—é
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è Bephyt'c—è –≤ r–ªa–≤hoe meh—é", callback_data="back_to_main_menu")
    keyboard = builder.as_markup()  # type: ignore

    # Pe–¥aktupyem teky—âee coo6—âehue, noka3bi–≤a—è cnpa–≤ky
    await callback_query.message.edit_text(help_text, reply_markup=keyboard, parse_mode="HTML")

    # Ot–≤e—áaem ha callback
    await callback_query.answer("–üoka3aha cnpa–≤ka no 6oty")
