import logging
import asyncio

from aiogram import Router, types
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from price_monitoring.parsers.dmarket_api import dmarket_api_client

logger = logging.getLogger(__name__)

router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
PAGE_SIZE = 5


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
class FilterStates(StatesGroup):
    waiting_min_profit = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
    waiting_max_profit = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏
    browsing_offers = State()    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π


def create_main_menu_keyboard() -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üìä –í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º", callback_data="select_mode"
    )
    builder.button(
        text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="configure_filters"
    )
    builder.button(
        text="üîç –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", callback_data="show_offers"
    )
    builder.button(
        text="üéÆ –í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—ã", callback_data="select_games"
    )
    builder.button(
        text="‚ùì –ü–æ–º–æ—â—å", callback_data="show_help"
    )
    builder.adjust(2, 2, 1)  # –†–∞—Å–ø–æ–ª–æ–∂–∏–º –∫–Ω–æ–ø–∫–∏: 2 –≤ —Ä—è–¥, 2 –≤ —Ä—è–¥, –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—Ç–¥–µ–ª—å–Ω–æ
    return builder.as_markup()


# –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∏–≥—Ä
SUPPORTED_GAMES = ["CS2", "Dota2", "TF2", "Rust"]


# –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TRADING_MODES = {
    "balance_boost": {
        "name": "–†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞",
        "min_profit": 1,
        "max_profit": 5,
        "description": (
            "–ü–æ–∏—Å–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏–±—ã–ª—å—é ($1-5) "
            "–∏ –Ω–∏–∑–∫–∏–º —Ä–∏—Å–∫–æ–º"
        ),
        "emoji": "\U0001F4B8"  # üí∏
    },
    "medium_trader": {
        "name": "–°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä",
        "min_profit": 5,
        "max_profit": 20,
        "description": (
            "–§–æ–∫—É—Å –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö —Å–æ —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–∏–±—ã–ª—å—é ($5-20), "
            "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–∏–∫–≤–∏–¥–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º"
        ),
        "emoji": "\U0001F4B0"  # üí∞
    },
    "trade_pro": {
        "name": "Trade Pro",
        "min_profit": 20,
        "max_profit": 100,
        "description": (
            "–ü–æ–∏—Å–∫ —Ä–µ–¥–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π –ø—Ä–∏–±—ã–ª—å—é ($20-100) "
            "–∏ –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤"
        ),
        "emoji": "\U0001F4C8"  # üìà
    }
}


def create_game_selection_keyboard() -> types.InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    # Game emoji mapping
    game_emojis = {
        "CS2": "üî´",
        "Dota2": "üßô‚Äç‚ôÇÔ∏è",
        "TF2": "üé©",
        "Rust": "üèùÔ∏è"
    }
    
    for game in SUPPORTED_GAMES:
        # Get emoji for the game
        emoji = game_emojis.get(game, "üéÆ")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å game_ –¥–ª—è callback_data
        builder.button(text=f"{emoji} {game}", callback_data=f"game_{game.lower()}")
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Å–µ—Ö –∏–≥—Ä
    builder.button(text="‚úÖ –í—Å–µ –∏–≥—Ä—ã", callback_data="game_all")
    # –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")
    builder.adjust(2)  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return builder.as_markup()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
def create_filter_settings_keyboard() -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤.
    
    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    """
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üíµ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω. –ø—Ä–∏–±—ã–ª—å", 
        callback_data="filter_set_min_profit"
    )
    builder.button(
        text="üí∏ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å. –ø—Ä–∏–±—ã–ª—å", 
        callback_data="filter_set_max_profit"
    )
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="back_to_main_menu"
    )
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
    return builder.as_markup()


def create_mode_selection_keyboard() -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    builder = InlineKeyboardBuilder()
    
    for mode_id, mode_info in TRADING_MODES.items():
        builder.button(
            text=f"{mode_info['emoji']} {mode_info['name']}",
            callback_data=f"mode_{mode_id}"
        )
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.button(
        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        callback_data="back_to_main_menu"
    )
    
    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    builder.adjust(1)
    return builder.as_markup()


@router.message(CommandStart())
async def handle_start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if not message.from_user:
        logger.warning("Received /start command without user info.")
        return

    user_id = message.from_user.id
    logger.info(f"User {user_id} started the bot.")
    keyboard = create_main_menu_keyboard()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    welcome_message = (
        "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ DMarket.</b>\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ "
        "–Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ DMarket. –í—ã –º–æ–∂–µ—Ç–µ:\n\n"
        "‚Ä¢ <b>–í—ã–±—Ä–∞—Ç—å —Ä–µ–∂–∏–º</b> - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞\n"
        "‚Ä¢ <b>–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã</b> - —É–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–∏–±—ã–ª–∏\n"
        "‚Ä¢ <b>–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b> - –Ω–∞–π—Ç–∏ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã\n"
        "‚Ä¢ <b>–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—ã</b> - –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞\n\n"
        "<i>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:</i>"
    )
    
    await message.answer(
        welcome_message,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.message(Command("help"))
async def handle_help(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
    """
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ
    help_text = (
        "üìö <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n\n"
        "üîç <b>–ü–æ–∏—Å–∫ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b> - –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ DMarket "
        "—Å –Ω–∞–∏–ª—É—á—à–∏–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏.\n\n"
        "üéÆ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–≥—Ä—ã:</b>\n"
        "‚Ä¢ üî´ CS2 (Counter-Strike 2)\n"
        "‚Ä¢ üßô‚Äç‚ôÇÔ∏è Dota 2\n"
        "‚Ä¢ üé© Team Fortress 2 (TF2)\n"
        "‚Ä¢ üèùÔ∏è Rust\n\n"
        "<b>–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:</b>\n"
        "‚Ä¢ üí∏ <b>–†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞</b> - –ø—Ä–µ–¥–º–µ—Ç—ã —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏–±—ã–ª—å—é ($1-5) –∏ –Ω–∏–∑–∫–∏–º —Ä–∏—Å–∫–æ–º\n"
        "‚Ä¢ üí∞ <b>–°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä</b> - –ø—Ä–µ–¥–º–µ—Ç—ã —Å–æ —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–∏–±—ã–ª—å—é ($5-20)\n"
        "‚Ä¢ üìà <b>Trade Pro</b> - —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π –ø—Ä–∏–±—ã–ª—å—é ($20+)\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢ /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è/–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å)\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –≤—Å–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
        "4. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è' –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
        "5. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n\n"
        "<i>–ë–æ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.</i>"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="back_to_main_menu"
    )
    keyboard = builder.as_markup()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø—Ä–∞–≤–∫—É
    await message.answer(
        help_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


# –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è callback_query –∫–Ω–æ–ø–æ–∫
@router.callback_query(lambda c: c.data == "select_mode")
async def process_select_mode(callback_query: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not callback_query.message or not isinstance(
        callback_query.message, types.Message
    ):
        await callback_query.answer(
            "Cannot process: "
            "original message not found or inaccessible."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∂–∏–º–∞–º–∏
    keyboard = create_mode_selection_keyboard()
    await callback_query.message.edit_text(
        "\U0001F3AF –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "configure_filters")
async def process_configure_filters(callback_query: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not callback_query.message or not isinstance(
        callback_query.message, types.Message
    ):
        await callback_query.answer(
            "Cannot process: "
            "original message not found or inaccessible."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    keyboard = create_filter_settings_keyboard()
    
    await callback_query.message.edit_text(
        "üõ†Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
        "<i>–≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.</i>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "show_offers")
async def process_show_offers(
    callback_query: types.CallbackQuery, state: FSMContext
):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if not callback_query.message or not isinstance(
        callback_query.message, types.Message
    ):
        await callback_query.answer(
            "Cannot process: "
            "original message not found or inaccessible."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ state
    user_data = await state.get_data()
    
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    selected_mode = user_data.get("selected_mode", "balance_boost")
    selected_games = user_data.get("selected_games", ["CS2"])
    min_profit = float(user_data.get("min_profit", 1))
    max_profit = float(user_data.get("max_profit", 100))
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
    mode_name = "–Ω–µ –≤—ã–±—Ä–∞–Ω"
    mode_emoji = "\U00002753"  # ‚ùì
    if selected_mode in TRADING_MODES:
        mode_name = TRADING_MODES[selected_mode]["name"]
        mode_emoji = TRADING_MODES[selected_mode]["emoji"]
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    games_str = ", ".join(selected_games) if selected_games else "–Ω–µ –≤—ã–±—Ä–∞–Ω—ã"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∏–≥—Ä—ã
    search_game = "cs2"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é CS2
    if selected_games and len(selected_games) == 1:
        search_game = selected_games[0].lower()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –ø–æ–∏—Å–∫–∞
    message_text = (
        f"üîç <b>–ü–æ–∏—Å–∫ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b>\n\n"
        f"<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:</b>\n"
        f"{mode_emoji} <b>–†–µ–∂–∏–º:</b> {mode_name}\n"
        f"üéÆ <b>–ò–≥—Ä—ã:</b> {games_str}\n"
        f"üí∞ <b>–ü—Ä–∏–±—ã–ª—å:</b> –æ—Ç <b>${min_profit:.2f}</b> –¥–æ <b>${max_profit:.2f}</b>\n\n"
        f"<i>–ò–¥–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π... —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.</i>\n"
        f"<i>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.</i>"
    )
    
    await callback_query.message.edit_text(
        message_text,
        parse_mode="HTML"
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å '—á–∞—Å–∏–∫–∏' —É –∫–Ω–æ–ø–∫–∏
    await callback_query.answer("–ù–∞—á–∞—Ç –ø–æ–∏—Å–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π...")
    
    try:
        # –ü–æ–∏—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å –ø–æ–º–æ—â—å—é API Dmarket
        # –¢–µ–ø–µ—Ä—å –æ–∂–∏–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –∫—É—Ä—Å–æ—Ä–æ–º –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        search_result = await dmarket_api_client.find_arbitrage_opportunities(
            game=search_game,
            min_profit=min_profit,
            max_profit=max_profit,
            limit=PAGE_SIZE
        )
        
        offers = search_result.get("items", [])
        cursor = search_result.get("cursor")
        has_next_page = search_result.get("has_next_page", False)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ state –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        await state.update_data(
            offers_page=1,
            offers_cursor=cursor,
            offers_game=search_game,
            offers_min_profit=min_profit,
            offers_max_profit=max_profit,
            offers_has_next_page=has_next_page
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
        await state.set_state(FilterStates.browsing_offers)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        results_text = format_offers_message(offers, 1, 10 if has_next_page else 1)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard = create_pagination_keyboard(
            page=1,
            total_pages=10 if has_next_page else 1,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å. 10 —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            has_next_page=has_next_page,
            has_prev_page=False  # –ù–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        await callback_query.message.answer(
            results_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error searching for offers: {e}")
        await callback_query.message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b>\n\n"
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:\n"
            f"<code>{str(e)}</code>\n\n"
            f"<i>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>",
            parse_mode="HTML",
            reply_markup=create_main_menu_keyboard()
        )


@router.callback_query(lambda c: c.data == "select_games")
async def process_select_games(callback_query: types.CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if not callback_query.message or not isinstance(
        callback_query.message, types.Message
    ):
        await callback_query.answer(
            "Cannot process: "
            "original message not found or inaccessible."
        )
        return
    keyboard = create_game_selection_keyboard()
    await callback_query.message.edit_text(
        "üéÆ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –∏–≥—Ä—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Å–µ –∏–≥—Ä—ã "
        "–¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –∏–≥—Ä–∞–º.\n\n"
        "<i>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–≥—Ä—ã: CS2, Dota2, TF2, Rust</i>", 
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å '—á–∞—Å–∏–∫–∏' —É –∫–Ω–æ–ø–∫–∏
    await callback_query.answer()


# –§–∏–ª—å—Ç—Ä –¥–ª—è callback_query, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å 'game_'
def game_callback_filter(callback: types.CallbackQuery) -> bool:
    return callback.data is not None and callback.data.startswith("game_")


# –§–∏–ª—å—Ç—Ä –¥–ª—è callback_query, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å 'mode_'
def mode_callback_filter(callback: types.CallbackQuery) -> bool:
    return callback.data is not None and callback.data.startswith("mode_")


# –§–∏–ª—å—Ç—Ä –¥–ª—è callback_query, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
def filter_callback_filter(callback: types.CallbackQuery) -> bool:
    return callback.data is not None and callback.data.startswith("filter_")


# –§–∏–ª—å—Ç—Ä –¥–ª—è callback_query, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
def pagination_callback_filter(callback: types.CallbackQuery) -> bool:
    return (callback.data is not None and 
            (callback.data.startswith("page_next_") or 
             callback.data.startswith("page_prev_")))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã –∏–ª–∏ –≤—Å–µ—Ö –∏–≥—Ä
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –≤–º–µ—Å—Ç–æ lambda
@router.callback_query(game_callback_filter)
async def process_game_selection(
    callback_query: types.CallbackQuery, state: FSMContext
):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if not callback_query.message or not isinstance(
        callback_query.message, types.Message
    ):
        await callback_query.answer(
            "Cannot process: "
            "original message not found or inaccessible."
        )
        return
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ callback_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—Ö–æ—Ç—è lambda —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç)
    if not callback_query.data:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await callback_query.answer("Error: Missing callback data.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–≥—Ä—É –∏–∑ callback_data (cs2, dota2, all)
    selected_game = callback_query.data.split("_", 1)[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    user_id = (
        callback_query.from_user.id
        if callback_query.from_user
        else "Unknown"
    )

    # Game emoji mapping –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    game_emojis = {
        "cs2": "üî´",
        "dota2": "üßô‚Äç‚ôÇÔ∏è",
        "tf2": "üé©",
        "rust": "üèùÔ∏è",
        "all": "‚úÖ"
    }
    
    # –ü–æ–ª—É—á–∞–µ–º emoji –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∏–≥—Ä—ã
    game_emoji = game_emojis.get(selected_game, "üéÆ")

    if selected_game == "all":
        log_message = f"User {user_id} selected all games."
        logger.info(log_message)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ state
        await state.update_data(selected_games=SUPPORTED_GAMES)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –≤—Å–µ—Ö –∏–≥—Ä
        message_text = (
            f"{game_emoji} <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Å–µ –∏–≥—Ä—ã</b>\n\n"
            f"–ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è –ø–æ –≤—Å–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –∏–≥—Ä–∞–º: "
            f"<b>{', '.join(SUPPORTED_GAMES)}</b>\n\n"
            f"<i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª –≤—ã–±–æ—Ä–∞ –∏–≥—Ä.</i>"
        )
        
        await callback_query.message.edit_text(
            message_text,
            parse_mode="HTML"
        )
        await callback_query.answer("–í—ã–±—Ä–∞–Ω—ã –≤—Å–µ –∏–≥—Ä—ã")
    else:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã (—Å —É—á–µ—Ç–æ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        proper_game_name = next(
            (game for game in SUPPORTED_GAMES if game.lower() == selected_game),
            selected_game.upper()
        )
        
        log_message = f"User {user_id} selected game: {selected_game}"
        logger.info(log_message)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ state
        await state.update_data(selected_games=[proper_game_name])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
        message_text = (
            f"{game_emoji} <b>–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: {proper_game_name}</b>\n\n"
            f"–ü–æ–∏—Å–∫ –±—É–¥–µ—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º —ç—Ç–æ–π –∏–≥—Ä—ã.\n\n"
            f"<i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —Ä–∞–∑–¥–µ–ª –≤—ã–±–æ—Ä–∞ –∏–≥—Ä.</i>"
        )
        
        await callback_query.message.edit_text(
            message_text,
            parse_mode="HTML"
        )
        await callback_query.answer(f"–í—ã–±—Ä–∞–Ω–∞ –∏–≥—Ä–∞ {proper_game_name}")

    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await asyncio.sleep(2)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—É—Ç–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    keyboard = create_main_menu_keyboard()
    await callback_query.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=keyboard
    )


@router.callback_query(mode_callback_filter)
async def process_mode_selection(
    callback_query: types.CallbackQuery, state: FSMContext
):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if not callback_query.message or not isinstance(
        callback_query.message, types.Message
    ):
        await callback_query.answer(
            "Cannot process: "
            "original message not found or inaccessible."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ callback_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not callback_query.data:
        await callback_query.answer("Error: Missing callback data.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –∏–∑ callback_data 
    # (mode_balance_boost, mode_medium_trader, mode_trade_pro)
    selected_mode = callback_query.data.split("_", 1)[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    user_id = (
        callback_query.from_user.id
        if callback_query.from_user
        else "Unknown"
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if selected_mode in TRADING_MODES:
        mode_info = TRADING_MODES[selected_mode]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º –≤ state
        await state.update_data(
            selected_mode=selected_mode,
            min_profit=mode_info["min_profit"],
            max_profit=mode_info["max_profit"]
        )
        
        logger.info(
            f"User {user_id} selected trading mode: {mode_info['name']}"
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        message_text = (
            f"{mode_info['emoji']} <b>–í—ã–±—Ä–∞–Ω —Ä–µ–∂–∏–º: {mode_info['name']}</b>\n\n"
            f"<b>üìã –û–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
            f"{mode_info['description']}\n\n"
            f"<b>üí∞ –î–∏–∞–ø–∞–∑–æ–Ω –ø—Ä–∏–±—ã–ª–∏:</b> "
            f"${mode_info['min_profit']}-${mode_info['max_profit']}\n\n"
            f"‚úÖ <i>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å "
            f"–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.</i>"
        )
        
        await callback_query.message.edit_text(
            message_text,
            parse_mode="HTML"
        )
        
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await callback_query.answer("–†–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω!")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await asyncio.sleep(2)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—É—Ç–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard = create_main_menu_keyboard()
        await callback_query.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=keyboard
        )
    else:
        logger.warning(
            f"User {user_id} selected unknown mode: {selected_mode}"
        )
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö."
        )
        await callback_query.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º")
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await asyncio.sleep(2)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—É—Ç–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        keyboard = create_main_menu_keyboard()
        await callback_query.message.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=keyboard
        )


@router.callback_query(lambda c: c.data == "back_to_main_menu")
async def process_back_to_main_menu(
    callback_query: types.CallbackQuery, state: FSMContext
):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if not callback_query.message or not isinstance(
        callback_query.message, types.Message
    ):
        await callback_query.answer(
            "Cannot process: "
            "original message not found or inaccessible."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if current_state == FilterStates.browsing_offers:
        await state.clear()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = create_main_menu_keyboard()
    await callback_query.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard
    )
    await callback_query.answer()


@router.callback_query(lambda c: c.data == "filter_set_min_profit")
async def process_set_min_profit(
    callback_query: types.CallbackQuery, state: FSMContext
):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if not callback_query.message or not isinstance(
        callback_query.message, types.Message
    ):
        await callback_query.answer(
            "Cannot process: "
            "original message not found or inaccessible."
        )
        return
    
    await callback_query.message.edit_text(
        "üíµ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):\n\n"
        "<i>–≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. "
        "–ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –ø—Ä–∏–±—ã–ª—å—é –±–æ–ª—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π.</i>",
        parse_mode="HTML"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –º–∏–Ω. –ø—Ä–∏–±—ã–ª–∏
    await state.set_state(FilterStates.waiting_min_profit)
    await callback_query.answer()


@router.message(StateFilter(FilterStates.waiting_min_profit))
async def process_min_profit_value(
    message: types.Message, state: FSMContext
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if not message.text:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5.5"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ
    try:
        min_profit = float(message.text)
        if min_profit < 0:
            await message.reply(
                "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ state
        await state.update_data(min_profit=min_profit)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        user_id = message.from_user.id if message.from_user else "Unknown"
        logger.info(f"User {user_id} set min_profit to {min_profit}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        confirm_message = await message.reply(
            f"‚úÖ <b>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${min_profit:.2f}</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è "
            f"—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –ø—Ä–∏–±—ã–ª—å—é –æ—Ç ${min_profit:.2f}.",
            parse_mode="HTML"
        )
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
        await asyncio.sleep(2)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
        keyboard = create_filter_settings_keyboard()
        
        await confirm_message.reply(
            "üõ†Ô∏è <b>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤?</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except ValueError:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 5 –∏–ª–∏ 5.5"
        )


@router.callback_query(lambda c: c.data == "filter_set_max_profit")
async def process_set_max_profit(
    callback_query: types.CallbackQuery, state: FSMContext
):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if not callback_query.message or not isinstance(
        callback_query.message, types.Message
    ):
        await callback_query.answer(
            "Cannot process: "
            "original message not found or inaccessible."
        )
        return
    
    await callback_query.message.edit_text(
        "üí∏ <b>–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–∏–±—ã–ª–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20):\n\n"
        "<i>–≠—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π. "
        "–ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –ø—Ä–∏–±—ã–ª—å—é –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π.</i>",
        parse_mode="HTML"
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –º–∞–∫—Å. –ø—Ä–∏–±—ã–ª–∏
    await state.set_state(FilterStates.waiting_max_profit)
    await callback_query.answer()


@router.message(StateFilter(FilterStates.waiting_max_profit))
async def process_max_profit_value(
    message: types.Message, state: FSMContext
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if not message.text:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 20 –∏–ª–∏ 25.5"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Å–ª–æ
    try:
        max_profit = float(message.text)
        if max_profit < 0:
            await message.reply(
                "‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å min_profit
        data = await state.get_data()
        min_profit = data.get("min_profit", 0)
        
        if max_profit < min_profit:
            await message.reply(
                f"‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π "
                f"(${min_profit:.2f}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª—å—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ."
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ state
        await state.update_data(max_profit=max_profit)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        user_id = message.from_user.id if message.from_user else "Unknown"
        logger.info(f"User {user_id} set max_profit to {max_profit}")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        confirm_message = await message.reply(
            f"‚úÖ <b>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${max_profit:.2f}</b>\n\n"
            f"–¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±—É–¥—É—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è "
            f"—Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –ø—Ä–∏–±—ã–ª—å—é –æ—Ç ${min_profit:.2f} –¥–æ ${max_profit:.2f}.",
            parse_mode="HTML"
        )
        
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
        await asyncio.sleep(2)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
        keyboard = create_filter_settings_keyboard()
        
        await confirm_message.reply(
            "üõ†Ô∏è <b>–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤?</b>\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    except ValueError:
        await message.reply(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 20 –∏–ª–∏ 25.5"
        )


# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def create_pagination_keyboard(
    page: int, 
    total_pages: int,
    has_next_page: bool, 
    has_prev_page: bool
) -> types.InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    
    Args:
        page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        has_next_page: –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        has_prev_page: –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
    Returns:
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    """
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã
    if has_prev_page:
        builder.button(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
            callback_data=f"page_prev_{page}"
        )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    builder.button(
        text=f"üìÑ {page}/{total_pages}",
        callback_data="page_info"  # –≠—Ç–æ—Ç callback –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è
    )
    
    if has_next_page:
        builder.button(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
            callback_data=f"page_next_{page}"
        )
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.button(
        text="‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="back_to_main_menu"
    )
    
    # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫: –Ω–∞–≤–∏–≥–∞—Ü–∏—è –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É, –≤–æ–∑–≤—Ä–∞—Ç - –≤ –¥—Ä—É–≥–æ–º
    builder.adjust(3, 1)
    return builder.as_markup()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def format_offers_message(
    offers: list, 
    page: int, 
    total_pages: int
) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
    
    Args:
        offers: –°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏
    """
    if not offers:
        return (
            "üö´ <b>–í—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
            "–ü–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å –ø—Ä–∏–±—ã–ª—å—é.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É."
        )
    
    message = (
        f"üí∞ <b>–ù–∞–π–¥–µ–Ω—ã –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b> "
        f"(—Å—Ç—Ä. {page}/{total_pages}):\n\n"
    )
    
    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–≥—Ä –∏ —ç–º–æ–¥–∑–∏
    game_emoji = {
        "cs2": "üî´",
        "dota2": "üßô‚Äç‚ôÇÔ∏è",
        "tf2": "üé©",
        "rust": "üèùÔ∏è"
    }
    
    for item in offers:
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–≥—Ä—ã
        game_icon = game_emoji.get(item['game'].lower(), "üéÆ")
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
        profit = float(item['profit'])
        if profit >= 20:
            profit_indicator = "üî•"  # –í—ã—Å–æ–∫–∞—è –ø—Ä–∏–±—ã–ª—å
        elif profit >= 10:
            profit_indicator = "üíé"  # –•–æ—Ä–æ—à–∞—è –ø—Ä–∏–±—ã–ª—å
        elif profit >= 5:
            profit_indicator = "üìà"  # –°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å
        else:
            profit_indicator = "‚öñÔ∏è"  # –ù–∏–∑–∫–∞—è –ø—Ä–∏–±—ã–ª—å
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏
        buy_price = float(item['buy_price'])
        sell_price = float(item['sell_price'])
        profit_percent = (profit / buy_price) * 100 if buy_price > 0 else 0
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–µ–¥–º–µ—Ç–∞
        message += (
            f"<b>{game_icon} {item['name']}</b>\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üíµ –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: <b>${buy_price:.2f}</b>\n"
            f"üí∏ –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: <b>${sell_price:.2f}</b>\n"
            f"{profit_indicator} –ü—Ä–∏–±—ã–ª—å: <b>${profit:.2f}</b> "
            f"(<i>{profit_percent:.1f}%</i>)\n\n"
        )
    
    message += (
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥—Ä—É–≥–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n"
        "<i>–¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏ –ø–ª–æ—â–∞–¥–∫–∏.</i>"
    )
    return message


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ (–∫–Ω–æ–ø–∫–∏ –í–ø–µ—Ä–µ–¥/–ù–∞–∑–∞–¥)
@router.callback_query(pagination_callback_filter)
async def process_pagination(
    callback_query: types.CallbackQuery, state: FSMContext
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ "–í–ø–µ—Ä–µ–¥" –∏ "–ù–∞–∑–∞–¥".
    
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é/–ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç
    —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if not callback_query.message or not isinstance(
        callback_query.message, types.Message
    ):
        await callback_query.answer(
            "Cannot process: "
            "original message not found or inaccessible."
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ callback_data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not callback_query.data:
        await callback_query.answer("Error: Missing callback data.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ state
    user_data = await state.get_data()
    current_page = user_data.get("offers_page", 1)
    cursor = user_data.get("offers_cursor")
    game = user_data.get("offers_game", "cs2")
    min_profit = user_data.get("offers_min_profit", 1.0)
    max_profit = user_data.get("offers_max_profit", 100.0)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (–≤–ø–µ—Ä–µ–¥/–Ω–∞–∑–∞–¥)
    is_next = callback_query.data.startswith("page_next_")
    
    # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –Ω–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if not is_next and current_page > 1:
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        new_page = current_page - 1
        # –î–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞–º –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫—É—Ä—Å–æ—Ä
        prev_cursor = f"page_{new_page - 1}" if new_page > 1 else None
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            offers_page=new_page,
            offers_cursor=prev_cursor
        )
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –∫ API)
        search_result = await dmarket_api_client.find_arbitrage_opportunities(
            game=game,
            min_profit=min_profit,
            max_profit=max_profit,
            limit=PAGE_SIZE,
            cursor=prev_cursor
        )
        
        offers = search_result.get("items", [])
        next_cursor = search_result.get("cursor")
        has_next_page = True  # –ù–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∞—è
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä –≤ state
        await state.update_data(offers_cursor=next_cursor)
    
    # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–í–ø–µ—Ä–µ–¥" –Ω–∞–º –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∫—É—Ä—Å–æ—Ä
    elif is_next and cursor:
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        new_page = current_page + 1
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—É—Ä—Å–æ—Ä–∞
        search_result = await dmarket_api_client.find_arbitrage_opportunities(
            game=game,
            min_profit=min_profit,
            max_profit=max_profit,
            limit=PAGE_SIZE,
            cursor=cursor
        )
        
        offers = search_result.get("items", [])
        next_cursor = search_result.get("cursor")
        has_next_page = search_result.get("has_next_page", False)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            offers_page=new_page,
            offers_cursor=next_cursor,
            offers_has_next_page=has_next_page
        )
    else:
        # –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
        await callback_query.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    results_text = format_offers_message(
        offers,
        new_page,
        10 if has_next_page else new_page  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –º–∞–∫—Å. 10 —Å—Ç—Ä–∞–Ω–∏—Ü
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = create_pagination_keyboard(
        page=new_page,
        total_pages=10 if has_next_page else new_page,
        has_next_page=has_next_page,
        has_prev_page=new_page > 1
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    await callback_query.message.edit_text(
        results_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(offers_page=new_page)


@router.callback_query(lambda c: c.data == "show_help")
async def process_show_help(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–º–æ—â—å".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if not callback_query.message or not isinstance(
        callback_query.message, types.Message
    ):
        await callback_query.answer(
            "Cannot process: "
            "original message not found or inaccessible."
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ
    help_text = (
        "üìö <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n\n"
        "üîç <b>–ü–æ–∏—Å–∫ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π</b> - –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–µ–¥–º–µ—Ç—ã –Ω–∞ DMarket "
        "—Å –Ω–∞–∏–ª—É—á—à–∏–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Ü–µ–Ω—ã –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏.\n\n"
        "üéÆ <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∏–≥—Ä—ã:</b>\n"
        "‚Ä¢ üî´ CS2 (Counter-Strike 2)\n"
        "‚Ä¢ üßô‚Äç‚ôÇÔ∏è Dota 2\n"
        "‚Ä¢ üé© Team Fortress 2 (TF2)\n"
        "‚Ä¢ üèùÔ∏è Rust\n\n"
        "<b>–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã:</b>\n"
        "‚Ä¢ üí∏ <b>–†–∞–∑–≥–æ–Ω –±–∞–ª–∞–Ω—Å–∞</b> - –ø—Ä–µ–¥–º–µ—Ç—ã —Å –Ω–µ–±–æ–ª—å—à–æ–π –ø—Ä–∏–±—ã–ª—å—é ($1-5) –∏ –Ω–∏–∑–∫–∏–º —Ä–∏—Å–∫–æ–º\n"
        "‚Ä¢ üí∞ <b>–°—Ä–µ–¥–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä</b> - –ø—Ä–µ–¥–º–µ—Ç—ã —Å–æ —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–∏–±—ã–ª—å—é ($5-20)\n"
        "‚Ä¢ üìà <b>Trade Pro</b> - —Ä–µ–¥–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã —Å –≤—ã—Å–æ–∫–æ–π –ø—Ä–∏–±—ã–ª—å—é ($20+)\n\n"
        "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∞—à–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏\n"
        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è/–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å)\n"
        "3. –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –∏–ª–∏ –≤—Å–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
        "4. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è' –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n"
        "5. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n\n"
        "<i>–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.</i>"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        callback_data="back_to_main_menu"
    )
    keyboard = builder.as_markup()
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è —Å–ø—Ä–∞–≤–∫—É
    await callback_query.message.edit_text(
        help_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback_query.answer("–ü–æ–∫–∞–∑–∞–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É") 