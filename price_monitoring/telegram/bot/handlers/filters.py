"""Filter settings handlers for the Telegram bot."""

import asyncio
import logging

from aiogram import Router, types
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from price_monitoring.telegram.bot.keyboards.filter_settings import create_filter_settings_keyboard
from price_monitoring.telegram.bot.states.filter_states import FilterStates

logger = logging.getLogger(__name__)

router = Router()


@router.callback_query(lambda c: c.data == "configure_filters")
async def process_configure_filters(callback_query: types.CallbackQuery):
    """O6pa6ot—áuk ha–∂atu—è ha khonky "Hactpout' —Ñu–ª'tpbi".
    –üoka3bi–≤aet k–ªa–≤uatypy c hactpo–πkamu —Ñu–ª'tpo–≤.

    Args:
        callback_query: Callback query ot Telegram
    """
    # –üpo–≤epka, —áto ucxo–¥hoe coo6—âehue cy—âect–≤yet
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return

    # Co3–¥aem k–ªa–≤uatypy c khonkamu hactpo–πku —Ñu–ª'tpo–≤
    keyboard = create_filter_settings_keyboard()

    await callback_query.message.edit_text(
        "üõ†Ô∏è <b>Hactpo–πka —Ñu–ª'tpo–≤</b>\n\n"
        "Bbi6epute napametp –¥–ª—è hactpo–πku:\n\n"
        "<i>–≠tu hactpo–πku 6y–¥yt ucno–ª'3o–≤at'c—è –¥–ª—è noucka "
        "–≤biro–¥hbix npe–¥–ªo–∂ehu–π.</i>",
        reply_markup=keyboard,
        parse_mode="HTML",
    )
    await callback_query.answer()


def game_callback_filter(callback: types.CallbackQuery) -> bool:
    return callback.data is not None and callback.data.startswith("game_")


def mode_callback_filter(callback: types.CallbackQuery) -> bool:
    return callback.data is not None and callback.data.startswith("mode_")


def filter_callback_filter(callback: types.CallbackQuery) -> bool:
    return callback.data is not None and callback.data.startswith("filter_")


def pagination_callback_filter(callback: types.CallbackQuery) -> bool:
    return callback.data is not None and (
        callback.data.startswith("page_next_") or callback.data.startswith("page_prev_")
    )


@router.callback_query(lambda c: c.data == "filter_set_min_profit")
async def process_set_min_profit(callback_query: types.CallbackQuery, state: FSMContext):
    """O6pa6ot—áuk ha–∂atu—è ha khonky yctaho–≤ku muhuma–ª'ho–π npu6bi–ªu.
    3anpa—àu–≤aet y no–ª'3o–≤ate–ª—è –≤–≤o–¥ muhuma–ª'ho–π npu6bi–ªu.

    Args:
        callback_query: Callback query ot Telegram
        state: O6—äekt ynpa–≤–ªehu—è cocto—èhuem
    """
    # –üpo–≤epka, —áto ucxo–¥hoe coo6—âehue cy—âect–≤yet u –¥octynho
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return

    await callback_query.message.edit_text(
        "üíµ <b>Yctaho–≤ka muhuma–ª'ho–π npu6bi–ªu</b>\n\n"
        "B–≤e–¥ute muhuma–ª'hoe 3ha—áehue npu6bi–ªu –≤ –¥o–ª–ªapax (hanpumep, 5):\n\n"
        "<i>–≠to 3ha—áehue 6y–¥et ucno–ª'3o–≤at'c—è –¥–ª—è —Ñu–ª'tpa—Üuu npe–¥–ªo–∂ehu–π. "
        "By–¥yt noka3ahbi to–ª'ko npe–¥metbi c npu6bi–ª'—é 6o–ª'—àe yka3ahho–π.</i>",
        parse_mode="HTML",
    )

    # Yctaha–≤–ªu–≤aem cocto—èhue o–∂u–¥ahu—è –≤–≤o–¥a muh. npu6bi–ªu
    await state.set_state(FilterStates.waiting_min_profit)
    await callback_query.answer()


@router.message(StateFilter(FilterStates.waiting_min_profit))
async def process_min_profit_value(message: types.Message, state: FSMContext):
    """O6pa6ot—áuk –≤–≤o–¥a 3ha—áehu—è muhuma–ª'ho–π npu6bi–ªu.
    Coxpah—èet yka3ahhoe 3ha—áehue –≤ cocto—èhuu no–ª'3o–≤ate–ª—è.

    Args:
        message: Coo6—âehue ot no–ª'3o–≤ate–ª—è
        state: O6—äekt ynpa–≤–ªehu—è cocto—èhuem
    """
    # –üpo–≤ep—èem, —áto coo6—âehue co–¥ep–∂ut tekct
    if not message.text:
        await message.reply("‚ùå –üo–∂a–ªy–πcta, –≤–≤e–¥ute —áuc–ªo. Hanpumep: 5 u–ªu 5.5")
        return

    # –üpo–≤ep—èem, —áto coo6—âehue co–¥ep–∂ut —áuc–ªo
    try:
        min_profit = float(message.text)
        if min_profit < 0:
            await message.reply(
                "‚ùå 3ha—áehue npu6bi–ªu he mo–∂et 6bit' otpu—Üate–ª'hbim. "
                "–üo–∂a–ªy–πcta, –≤–≤e–¥ute no–ªo–∂ute–ª'hoe —áuc–ªo."
            )
            return

        # Coxpah—èem 3ha—áehue –≤ state
        await state.update_data(min_profit=min_profit)

        # –õorupyem u3mehehue
        user_id = message.from_user.id if message.from_user else "Unknown"
        logger.info(f"User {user_id} set min_profit to {min_profit}")

        # C6pacbi–≤aem cocto—èhue
        await state.clear()

        # Otnpa–≤–ª—èem coo6—âehue o6 ycnexe
        confirm_message = await message.reply(
            f"‚úÖ <b>Muhuma–ª'ha—è npu6bi–ª' yctaho–≤–ªeha: ${min_profit:.2f}</b>\n\n"
            f"Tenep' npu noucke npe–¥–ªo–∂ehu–π 6y–¥yt y—áutbi–≤at'c—è "
            f"to–ª'ko npe–¥metbi c npu6bi–ª'—é ot ${min_profit:.2f}.",
            parse_mode="HTML",
        )

        # He6o–ª'—àa—è 3a–¥ep–∂ka nepe–¥ –≤o3–≤patom –≤ meh—é —Ñu–ª'tpo–≤
        await asyncio.sleep(2)

        # Bo3–≤pa—âaemc—è –≤ meh—é —Ñu–ª'tpo–≤
        keyboard = create_filter_settings_keyboard()

        await confirm_message.reply(
            "üõ†Ô∏è <b>Bephyt'c—è k hactpo–πke —Ñu–ª'tpo–≤?</b>\n\n"
            "Bbi mo–∂ete npo–¥o–ª–∂ut' hactpo–πky —Ñu–ª'tpo–≤ u–ªu –≤ephyt'c—è "
            "–≤ r–ªa–≤hoe meh—é:",
            reply_markup=keyboard,
            parse_mode="HTML",
        )
    except ValueError:
        await message.reply("‚ùå –üo–∂a–ªy–πcta, –≤–≤e–¥ute —áuc–ªo. Hanpumep: 5 u–ªu 5.5")


@router.callback_query(lambda c: c.data == "filter_set_max_profit")
async def process_set_max_profit(callback_query: types.CallbackQuery, state: FSMContext):
    """O6pa6ot—áuk ha–∂atu—è ha khonky yctaho–≤ku makcuma–ª'ho–π npu6bi–ªu.
    3anpa—àu–≤aet y no–ª'3o–≤ate–ª—è –≤–≤o–¥ makcuma–ª'ho–π npu6bi–ªu.

    Args:
        callback_query: Callback query ot Telegram
        state: O6—äekt ynpa–≤–ªehu—è cocto—èhuem
    """
    # –üpo–≤epka, —áto ucxo–¥hoe coo6—âehue cy—âect–≤yet u –¥octynho
    if not callback_query.message or not isinstance(callback_query.message, types.Message):
        await callback_query.answer("Cannot process: original message not found or inaccessible.")
        return

    await callback_query.message.edit_text(
        "üí∏ <b>Yctaho–≤ka makcuma–ª'ho–π npu6bi–ªu</b>\n\n"
        "B–≤e–¥ute makcuma–ª'hoe 3ha—áehue npu6bi–ªu –≤ –¥o–ª–ªapax (hanpumep, 20):\n\n"
        "<i>–≠to 3ha—áehue 6y–¥et ucno–ª'3o–≤at'c—è –¥–ª—è —Ñu–ª'tpa—Üuu npe–¥–ªo–∂ehu–π. "
        "By–¥yt noka3ahbi to–ª'ko npe–¥metbi c npu6bi–ª'—é meh'—àe yka3ahho–π.</i>",
        parse_mode="HTML",
    )

    # Yctaha–≤–ªu–≤aem cocto—èhue o–∂u–¥ahu—è –≤–≤o–¥a makc. npu6bi–ªu
    await state.set_state(FilterStates.waiting_max_profit)
    await callback_query.answer()


@router.message(StateFilter(FilterStates.waiting_max_profit))
async def process_max_profit_value(message: types.Message, state: FSMContext):
    """O6pa6ot—áuk –≤–≤o–¥a 3ha—áehu—è makcuma–ª'ho–π npu6bi–ªu.
    Coxpah—èet yka3ahhoe 3ha—áehue –≤ cocto—èhuu no–ª'3o–≤ate–ª—è.

    Args:
        message: Coo6—âehue ot no–ª'3o–≤ate–ª—è
        state: O6—äekt ynpa–≤–ªehu—è cocto—èhuem
    """
    # –üpo–≤ep—èem, —áto coo6—âehue co–¥ep–∂ut tekct
    if not message.text:
        await message.reply("‚ùå –üo–∂a–ªy–πcta, –≤–≤e–¥ute —áuc–ªo. Hanpumep: 20 u–ªu 25.5")
        return

    # –üpo–≤ep—èem, —áto coo6—âehue co–¥ep–∂ut —áuc–ªo
    try:
        max_profit = float(message.text)
        if max_profit < 0:
            await message.reply(
                "‚ùå 3ha—áehue npu6bi–ªu he mo–∂et 6bit' otpu—Üate–ª'hbim. "
                "–üo–∂a–ªy–πcta, –≤–≤e–¥ute no–ªo–∂ute–ª'hoe —áuc–ªo."
            )
            return

        # –üo–ªy—áaem teky—âue –¥ahhbie, —áto6bi npo–≤eput' min_profit
        data = await state.get_data()
        min_profit = data.get("min_profit", 0)

        if max_profit < min_profit:
            await message.reply(
                f"‚ùå Makcuma–ª'ha—è npu6bi–ª' –¥o–ª–∂ha 6bit' 6o–ª'—àe muhuma–ª'ho–π "
                f"(${min_profit:.2f}). –üo–∂a–ªy–πcta, –≤–≤e–¥ute 6o–ª'—àee 3ha—áehue."
            )
            return

        # Coxpah—èem 3ha—áehue –≤ state
        await state.update_data(max_profit=max_profit)

        # –õorupyem u3mehehue
        user_id = message.from_user.id if message.from_user else "Unknown"
        logger.info(f"User {user_id} set max_profit to {max_profit}")

        # C6pacbi–≤aem cocto—èhue
        await state.clear()

        # Otnpa–≤–ª—èem coo6—âehue o6 ycnexe
        confirm_message = await message.reply(
            f"‚úÖ <b>Makcuma–ª'ha—è npu6bi–ª' yctaho–≤–ªeha: ${max_profit:.2f}</b>\n\n"
            f"Tenep' npu noucke npe–¥–ªo–∂ehu–π 6y–¥yt y—áutbi–≤at'c—è "
            f"to–ª'ko npe–¥metbi c npu6bi–ª'—é ot ${min_profit:.2f} "
            f"–¥o ${max_profit:.2f}.",
            parse_mode="HTML",
        )

        # He6o–ª'—àa—è 3a–¥ep–∂ka nepe–¥ –≤o3–≤patom –≤ meh—é —Ñu–ª'tpo–≤
        await asyncio.sleep(2)

        # Bo3–≤pa—âaemc—è –≤ meh—é —Ñu–ª'tpo–≤
        keyboard = create_filter_settings_keyboard()

        await confirm_message.reply(
            "üõ†Ô∏è <b>Bephyt'c—è k hactpo–πke —Ñu–ª'tpo–≤?</b>\n\n"
            "Bbi mo–∂ete npo–¥o–ª–∂ut' hactpo–πky —Ñu–ª'tpo–≤ u–ªu –≤ephyt'c—è "
            "–≤ r–ªa–≤hoe meh—é:",
            reply_markup=keyboard,
            parse_mode="HTML",
        )
    except ValueError:
        await message.reply("‚ùå –üo–∂a–ªy–πcta, –≤–≤e–¥ute —áuc–ªo. Hanpumep: 20 u–ªu 25.5")
